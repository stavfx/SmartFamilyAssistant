{
  "swagger" : "2.0",
  "info" : {
    "title" : "ring_gateway_schema",
    "description" : "Client API for Ring product.",
    "version" : "1.27"
  },
  "basePath" : "/v1",
  "schemes" : [ "http", "https" ],
  "produces" : [ "application/json" ],
  "consumes" : [ "application/json" ],
  "paths" : {
    "/overview" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      } ],
      "get" : {
        "summary" : "get all information relevant to current user",
        "operationId" : "getOverview",
        "description" : "Get all information that is relevant to the current user and the group they are in, and that is appropriate for early loading. (i.e. things like history are not included here.)\n\nIf the user has admin rights, admin-only information will be included. This method is intended for use after a previously-activated client has started and all data needs to be refetched.",
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        }, {
          "name" : "sections",
          "description" : "If present, informs server which sections should be included in overview. If not present, all available sections will be returned.",
          "in" : "query",
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "me", "systemInfo", "group", "places", "lastKnowns", "users", "controlsSettingsList", "devices" ]
          },
          "required" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "The operation is successful, information is returned.",
            "schema" : {
              "$ref" : "#/definitions/OverviewResponse"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "overview" ]
      }
    },
    "/me" : {
      "parameters" : [ {
        "$ref" : "#/parameters/accessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      } ],
      "get" : {
        "summary" : "get information for the current user",
        "operationId" : "getMe",
        "description" : "Return information for the current user.",
        "responses" : {
          "200" : {
            "description" : "The operation is successful and me data is returned.",
            "schema" : {
              "$ref" : "#/definitions/Me"
            }
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "me" ]
      },
      "put" : {
        "summary" : "update information for the current user",
        "operationId" : "updateMe",
        "description" : "Update information associated with the current user.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Request data for updateMe request",
          "schema" : {
            "$ref" : "#/definitions/UpdateMeRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "me" ]
      }
    },
    "/system" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      } ],
      "get" : {
        "summary" : "get information for the contacted system",
        "operationId" : "getSystemInfo",
        "description" : "Return information information required by the client that is the same across the entire application.",
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        } ],
        "responses" : {
          "200" : {
            "description" : "The operation is successful and system data is returned.",
            "schema" : {
              "$ref" : "#/definitions/SystemInfo"
            }
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "system" ]
      }
    },
    "/refreshTokens" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      } ],
      "post" : {
        "summary" : "request fresh access token",
        "operationId" : "refresh",
        "description" : "Given a refresh token with one or more claims, request an access token with the same claims. This method is used when a client's access token has expired.\n\nThe claims inside the token will be verified against system state before a new token is issued. For example, if the token contains an admin claim, and the account administrator has asked that admin clients log in again, verification will fail and an error will be returned.",
        "parameters" : [ {
          "name" : "refreshToken",
          "in" : "header",
          "description" : "Refresh token. This may be any type of refresh token recognized by the system.",
          "type" : "string",
          "format" : "password",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/responses/refreshTokenSuccess"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badRefreshToken"
          },
          "403" : {
            "$ref" : "#/responses/forbiddenRefresh"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "tokens" ]
      }
    },
    "/auth" : {
      "post" : {
        "summary" : "INCUBATING authenticate using credentials",
        "operationId" : "authenticate",
        "description" : "Authenticate with the system. If the request is successful access and refresh tokens are returned.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Credentials to authenticate with",
          "schema" : {
            "$ref" : "#/definitions/AuthRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Authentication against an existing account was successful. Access and refresh tokens are returned.",
            "schema" : {
              "$ref" : "#/definitions/Token"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/authFailed"
          },
          "402" : {
            "description" : "Credentials are correct but the user needs to signup for the service. A SignupToken object is returned for the user to use for the signup process. A signup token consists of only an accessToken and no refreshToken.",
            "schema" : {
              "$ref" : "#/definitions/SignupToken"
            }
          },
          "403" : {
            "description" : "Credentials are correct but not allowed to login to this application."
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "auth" ]
      }
    },
    "/upgradeInfo/{clientPlatform}/{clientType}/{clientVersion}" : {
      "get" : {
        "summary" : "get upgrade info for clients",
        "operationId" : "getUpgradeConfig",
        "description" : "Get appropriate upgrade config for clients.",
        "parameters" : [ {
          "name" : "clientPlatform",
          "in" : "path",
          "description" : "Client platform in the form of android/ios.",
          "type" : "string",
          "required" : true
        }, {
          "name" : "clientType",
          "in" : "path",
          "description" : "Client type in the form of child/parent.",
          "type" : "string",
          "required" : true
        }, {
          "name" : "clientVersion",
          "in" : "path",
          "description" : "Client version",
          "type" : "string",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Success, return appropriate configuration.",
            "schema" : {
              "$ref" : "#/definitions/UpgradeConfig"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "upgradeConfig" ]
      }
    },
    "/groups/{groupId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      } ],
      "get" : {
        "summary" : "get group data for a specific group",
        "operationId" : "getGroup",
        "description" : "Request group data for the group specified. The access token provided must allow access to that group.",
        "responses" : {
          "200" : {
            "description" : "The operation is successful and group data is returned.",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "groups" ]
      }
    },
    "/groups/{groupId}/timezone" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      } ],
      "put" : {
        "summary" : "update the timezone of this group",
        "operationId" : "updateGroupTimezone",
        "description" : "Update the timezone of the group to the specified value.",
        "parameters" : [ {
          "$ref" : "#/parameters/adminAccessToken"
        }, {
          "$ref" : "#/parameters/groupId"
        }, {
          "name" : "request",
          "in" : "body",
          "description" : "Request data for update admin settings request.",
          "schema" : {
            "$ref" : "#/definitions/UpdateGroupTimezoneRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "groups" ]
      }
    },
    "/groups/{groupId}/members/{userId}/locationSharingPreference" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      } ],
      "put" : {
        "summary" : "update the locationSharingPreference of this user",
        "operationId" : "updateMemberLocationSharingPreference",
        "description" : "Update the locationSharingPreference of the user in the given group",
        "parameters" : [ {
          "$ref" : "#/parameters/groupId"
        }, {
          "$ref" : "#/parameters/userId"
        }, {
          "name" : "request",
          "in" : "body",
          "description" : "Request data for update locationSharingPreference request.",
          "schema" : {
            "$ref" : "#/definitions/UpdateLocationSharingPreferenceRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Location sharing preference has been updated",
            "schema" : {
              "$ref" : "#/definitions/GroupMember"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "groups" ]
      }
    },
    "/lastKnowns/{groupId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      } ],
      "get" : {
        "summary" : "get last known data for specific group",
        "operationId" : "getGroupLastKnowns",
        "description" : "Request \"last known\" data for all members of the specified group.",
        "responses" : {
          "200" : {
            "description" : "The operation is successful and data is returned.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/LastKnownInfo"
              },
              "minItems" : 0
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "lastKnowns" ]
      }
    },
    "/places/{groupId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      } ],
      "get" : {
        "summary" : "get details of current places",
        "operationId" : "getAllPlaces",
        "description" : "Get a full list of all places that currently exist for the specified group ID.",
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation successful, list of places returned.",
            "schema" : {
              "description" : "List of places.",
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Place"
              },
              "minItems" : 0
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "places" ]
      },
      "post" : {
        "summary" : "add a new place",
        "operationId" : "addPlace",
        "description" : "Add a new place to this group.",
        "parameters" : [ {
          "$ref" : "#/parameters/adminAccessToken"
        }, {
          "name" : "request",
          "in" : "body",
          "description" : "Data for place to be created.",
          "schema" : {
            "$ref" : "#/definitions/PlaceRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of created place, including ID.",
            "schema" : {
              "$ref" : "#/definitions/Place"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "places" ]
      }
    },
    "/places/{groupId}/{placeId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "name" : "placeId",
        "in" : "path",
        "description" : "ID of place affected by this operation.",
        "type" : "string",
        "minLength" : 4,
        "maxLength" : 64,
        "required" : true
      } ],
      "put" : {
        "summary" : "update a place",
        "operationId" : "updatePlace",
        "description" : "Update an existing place.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Information to set in place.",
          "schema" : {
            "$ref" : "#/definitions/PlaceRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Updated details of place.",
            "schema" : {
              "$ref" : "#/definitions/Place"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "places" ]
      },
      "delete" : {
        "summary" : "remove a place",
        "operationId" : "deletePlace",
        "description" : "Remove a place from this group.",
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "places" ]
      }
    },
    "/places/{groupId}/{placeId}/notifications" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "name" : "placeId",
        "in" : "path",
        "description" : "ID of place affected by this operation.",
        "type" : "string",
        "minLength" : 4,
        "maxLength" : 64,
        "required" : true
      } ],
      "put" : {
        "summary" : "update notification settings for the requesting user.",
        "operationId" : "updatePlaceSettings",
        "description" : "Update notification settings for the requesting user.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Information to set in place.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/PlaceNotificationSettings"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Request is successful and the current settings are returned.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PlaceNotificationSettings"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "places" ]
      }
    },
    "/history/{groupId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      } ],
      "get" : {
        "summary" : "get history",
        "operationId" : "getHistory",
        "description" : "Get history records that match the supplied parameters. Records will be returned in reverse historical order, i.e. with the most recent record first.",
        "parameters" : [ {
          "name" : "endTime",
          "description" : "End time for record search. If present, all records after this time will be omitted from results.",
          "in" : "query",
          "type" : "string",
          "format" : "date-time",
          "required" : false
        }, {
          "name" : "maxRecords",
          "description" : "Maximum number of records to return from the history service. If more records that this number match the search criteria, the latest records from the history service that match this number will be returned. Note that because the gateway adds unknown location records if the user's history records are separated by more than a certain (configurable) amount of time, the actual number of records returned from the gateway can be more than this.",
          "in" : "query",
          "type" : "integer",
          "minimum" : 1,
          "default" : 32,
          "maximum" : 512,
          "required" : false
        }, {
          "name" : "startTime",
          "description" : "Start time for record search. If present, all records before this time will be omitted from results.",
          "in" : "query",
          "type" : "string",
          "format" : "date-time",
          "required" : false
        }, {
          "name" : "userId",
          "description" : "User id to fetch history records for. If not present, history records for all users in the group will be considered for return.",
          "in" : "query",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64,
          "required" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "The operation was successful. Matching records from the history service will be returned, up to maxRecords. The gateway may add extra records. If no records matched, an empty array will be returned.",
            "schema" : {
              "description" : "an array of history items",
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/HistoryItem"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "history" ]
      }
    },
    "/users" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      } ],
      "get" : {
        "summary" : "get user information",
        "operationId" : "getUsers",
        "description" : "Get user information for all users in any group accessible to the user. User information includes the MDN and description information (name and image information).",
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        } ],
        "responses" : {
          "200" : {
            "description" : "The operation is successful, user information is returned.",
            "schema" : {
              "description" : "An array, each element containing information for one user.",
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/User"
              }
            }
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/users/{userId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/accessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "put" : {
        "summary" : "update user",
        "operationId" : "updateUser",
        "description" : "Update modifiable fields for a user. Modifiable fields on a user are just the description fields. Requires an access token with either a \"device\" claim for that userId or an \"admin\" claim that covers that user. If a field is omitted from the request, the stored value of that field will be cleared.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Request for update to user description.",
          "schema" : {
            "$ref" : "#/definitions/UpdateUserRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/users/{userId}/imageUploadParams" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "post" : {
        "summary" : "Request parameters to upload an image",
        "operationId" : "userImageUploadParams",
        "description" : "Request a set of parameters that can be used to upload an images for this user. These parameters can then be used by the client to send the image to the image storage provider (i.e. Cloudinary).",
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success, parameters are returned.",
            "schema" : {
              "$ref" : "#/definitions/UserImageUploadParams"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/voip/accessTokens" : {
      "parameters" : [ {
        "$ref" : "#/parameters/accessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      } ],
      "get" : {
        "summary" : "fetch voip access token",
        "operationId" : "getVoipAccessToken",
        "description" : "Get voip access token to access Twilio Resources.",
        "responses" : {
          "200" : {
            "description" : "The operation is successful, voip access token information is returned.",
            "schema" : {
              "$ref" : "#/definitions/VoipAccessResponse"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "501" : {
            "$ref" : "#/responses/notImplemented"
          }
        },
        "tags" : [ "voip" ]
      }
    },
    "/controls/{groupId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      } ],
      "get" : {
        "summary" : "get controls settings for all managed users in this group.",
        "operationId" : "getAllControlsSettings",
        "description" : "Get controls settings details for all managed users in this group.",
        "responses" : {
          "200" : {
            "description" : "The operation was successful. Controls settings will be returned for each managed user in the group.",
            "schema" : {
              "description" : "an array of controls settings items",
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ControlsSettings"
              },
              "minItems" : 0
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "controls" ]
      }
    },
    "/controls/{groupId}/{userId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "put" : {
        "summary" : "update controls settings",
        "operationId" : "updateControlsSettings",
        "description" : "Update (i.e. replace) controls settings for the specified user, who must be a managed user.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Data for controls settings",
          "schema" : {
            "$ref" : "#/definitions/ControlsSettingsFields"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "controls" ]
      }
    },
    "/devices/{groupId}/{userId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "get" : {
        "summary" : "get managed devices for a user",
        "operationId" : "getManagedDevices",
        "description" : "Get managed devices for a user, if any.",
        "parameters" : [ {
          "name" : "isPrimary",
          "in" : "query",
          "description" : "Flag indicating if a managed device is primary",
          "type" : "boolean",
          "required" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "return all managed devices for this user",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ManagedDevice"
              },
              "minItems" : 0
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "devices" ]
      },
      "post" : {
        "summary" : "attempt to add a managed device",
        "operationId" : "addManagedDevice",
        "description" : "Request to begin the process of provisioning, or \"pairing\", a managed device for the supplied user, who must be a managed user.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Data for add managed device request.",
          "schema" : {
            "$ref" : "#/definitions/AddManagedDeviceRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "202" : {
            "description" : "202 - Request to add managed user has been accepted, and is in progress. Operation will not be considered complete until pairing process is completed on the target device.",
            "schema" : {
              "$ref" : "#/definitions/AddManagedDeviceResponse"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "409" : {
            "$ref" : "#/responses/conflict"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "devices" ]
      }
    },
    "/controls/{groupId}/{userId}/onboarding" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "get" : {
        "summary" : "get controls onboarding info",
        "operationId" : "getControlsOnboardingInfo",
        "description" : "Get information required to run the controls onboarding process for this user.",
        "responses" : {
          "200" : {
            "description" : "Success, return requested info.",
            "schema" : {
              "$ref" : "#/definitions/ControlsOnboardingInfo"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "controls" ]
      }
    },
    "/devices/{groupId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      } ],
      "get" : {
        "summary" : "get managed devices for a group",
        "operationId" : "getGroupManagedDevices",
        "description" : "Get managed devices for all users in a group.",
        "responses" : {
          "200" : {
            "description" : "return all managed devices for users in this group",
            "schema" : {
              "$ref" : "#/definitions/ManagedDevicesByUsers"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "devices" ]
      }
    },
    "/devices/{groupId}/{userId}/{deviceId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      }, {
        "$ref" : "#/parameters/deviceId"
      } ],
      "get" : {
        "summary" : "get information on a specific managed device",
        "operationId" : "getManagedDevice",
        "description" : "Get information on a specific managed device.",
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        } ],
        "responses" : {
          "200" : {
            "description" : "return information on that specific device",
            "schema" : {
              "$ref" : "#/definitions/ManagedDevice"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "devices" ]
      },
      "delete" : {
        "summary" : "Deactivate a managed device",
        "operationId" : "deactivateManagedDevice",
        "description" : "Request that the managed device for a user be deactivated. If the request is accepted, device deactivation will be handled in the background, and the device will no longer be visible through the APIs.",
        "parameters" : [ {
          "$ref" : "#/parameters/adminAccessToken"
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "devices" ]
      }
    },
    "/devices/{groupId}/{userId}/{deviceId}/pair" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      }, {
        "$ref" : "#/parameters/deviceId"
      } ],
      "post" : {
        "summary" : "Request to pair/re-pair with an existing device.",
        "operationId" : "pairManagedDevice",
        "description" : "Request that a managed device be paired.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Data for pair request.",
          "schema" : {
            "$ref" : "#/definitions/PairManagedDeviceRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "202" : {
            "description" : "Request to pair device has been accepted but action on the managed device is required to complete the pairing process.",
            "schema" : {
              "$ref" : "#/definitions/PairManagedDeviceResponse"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "devices" ]
      }
    },
    "/categories" : {
      "parameters" : [ {
        "$ref" : "#/parameters/accessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      } ],
      "get" : {
        "summary" : "get controls / content categories",
        "operationId" : "getContentCategories",
        "description" : "Return information on all categories understood by this application.",
        "responses" : {
          "200" : {
            "description" : "Success, information on all categories will be returned.",
            "schema" : {
              "$ref" : "#/definitions/GetCategoriesResult"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "categories" ]
      }
    },
    "/policies" : {
      "parameters" : [ {
        "$ref" : "#/parameters/accessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      } ],
      "get" : {
        "summary" : "get list of supported controls policies",
        "operationId" : "getControlsPolicies",
        "description" : "Return information on all pre-defined content policies supported by this application.",
        "responses" : {
          "200" : {
            "description" : "Success, policy info will be returned.",
            "schema" : {
              "$ref" : "#/definitions/GetPoliciesResult"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "policies" ]
      }
    },
    "/dnsActivity/{groupId}/{userId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "get" : {
        "summary" : "INCUBATING Get DNS activity for user.",
        "operationId" : "getDnsActivity",
        "description" : "Get dns activity for a user and external id within a given time window. Results will include activity for all devices associated with the user. Activity records and domains are represented in a normalized fashion to minimize redundancy.",
        "parameters" : [ {
          "name" : "minTimestamp",
          "in" : "query",
          "description" : "Time interval lower bound, inclusive.",
          "type" : "string",
          "format" : "date-time",
          "required" : true
        }, {
          "name" : "maxTimestamp",
          "in" : "query",
          "description" : "Time interval upper bound, exclusive.",
          "type" : "string",
          "format" : "date-time",
          "required" : true
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Requested number of results to return. The server may choose to return fewer or slightly more results than requested. If the list of records is truncated, the most recent records will be returned.",
          "type" : "integer",
          "minimum" : 1
        }, {
          "name" : "paginationToken",
          "in" : "query",
          "description" : "Opaque value from previous query, used internally for pagination.",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful query",
            "schema" : {
              "$ref" : "#/definitions/DnsActivity"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "description" : "Resource not found.  Note that if the user exists but has no DNS activity, the server will return a 200 status code with an empty list of results, not a 404.",
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "dnsActivity" ]
      }
    },
    "/dnsCategories" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      } ],
      "get" : {
        "summary" : "INCUBATING Get content categories for internet domains.",
        "operationId" : "getDnsContentCategories",
        "description" : "Get list of all content categories.  The ids of these categories are referenced in the domains returned by the dns activity data endpoint.",
        "responses" : {
          "200" : {
            "description" : "Successful query",
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Identifier of current version of dns categories. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag for more information."
              }
            },
            "schema" : {
              "$ref" : "#/definitions/DnsCategories"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "dnsActivity" ]
      }
    },
    "/auth/deviceActivation" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      } ],
      "post" : {
        "summary" : "activate a device for pairing",
        "operationId" : "deviceActivation",
        "description" : "Activate a device",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Required parameters for device activation.",
          "schema" : {
            "$ref" : "#/definitions/DeviceActivationAuthRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation was successful. A token is returned.",
            "schema" : {
              "$ref" : "#/definitions/Token"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/authFailed"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "activation" ]
      }
    },
    "/scheduleChecks/{groupId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/groupId"
      } ],
      "get" : {
        "summary" : "get all schedule checks for an admin user",
        "operationId" : "getAllScheduleChecks",
        "description" : "Get details of all schedule checks in a group that are owned by the specified (admin) user. The supplied access token must grant admin rights for this user.",
        "responses" : {
          "200" : {
            "description" : "Operation successful, schedule check data will be returned",
            "schema" : {
              "description" : "List of all schedule checks owned by this user in the given group.",
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ScheduleCheck"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "scheduleChecks" ]
      },
      "post" : {
        "summary" : "add a new schedule check",
        "operationId" : "addScheduleCheck",
        "description" : "Add a new schedule check for this (admin) user. The supplied access token must grant admin access rights to this user.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Data for new schedule check.",
          "schema" : {
            "$ref" : "#/definitions/ScheduleCheckRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "Operation successful. Details of added schedule check, including ID, will be returned.",
            "schema" : {
              "$ref" : "#/definitions/ScheduleCheck"
            }
          },
          "202" : {
            "description" : "Operation successful. Details of added schedule check, including ID, will be returned. However, the user to be located does not have a compatible location sharing preference.",
            "schema" : {
              "$ref" : "#/definitions/ScheduleCheck"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "scheduleChecks" ]
      }
    },
    "/scheduleChecks/{groupId}/{scheduleCheckId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "name" : "scheduleCheckId",
        "in" : "path",
        "description" : "ID of schedule check to update.",
        "type" : "string",
        "required" : true
      } ],
      "put" : {
        "summary" : "update schedule check",
        "operationId" : "updateScheduleCheck",
        "description" : "Update an existing schedule check. The schedule check must be owned by the specified (admin) user, and the supplied access token must grant admin rights to that user.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Updated data for the schedule check.",
          "schema" : {
            "$ref" : "#/definitions/ScheduleCheckRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Update successful, data for the updated schedule check is returned.",
            "schema" : {
              "$ref" : "#/definitions/ScheduleCheck"
            }
          },
          "202" : {
            "description" : "Update successful, data for the updated schedule check is returned. However, the user to be located does not have a compatible location sharing preference.",
            "schema" : {
              "$ref" : "#/definitions/ScheduleCheck"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "scheduleChecks" ]
      },
      "delete" : {
        "summary" : "remove schedule check",
        "operationId" : "deleteScheduleCheck",
        "description" : "Delete an existing schedule check. The schedule check must be owned by the supplied (admin) user, and the supplied access token must grant admin rights to that user.",
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "scheduleChecks" ]
      }
    },
    "/ott/auth/facebook" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      } ],
      "post" : {
        "summary" : "authenticate using facebook",
        "operationId" : "ottRequestFacebookAuth",
        "description" : "Authenticate with the system using Facebook credentials. This is part of a flow that uses the Facebook Login functionality - i.e. a client needs to call Facebook first with the user's credentials, get back a Facebook code or a Facebook access token, and pass that on to this API call. If the Facebook credentials are valid but there isn't currently an account in our system associated with them, a new account will be created. For more info on Facebook Login, see: https://developers.facebook.com/docs/facebook-login/",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Required parameters for device activation.",
          "schema" : {
            "$ref" : "#/definitions/FacebookAuthRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Authentication against an existing account was successful. Access and refresh tokens returned.",
            "schema" : {
              "$ref" : "#/definitions/Token"
            }
          },
          "201" : {
            "description" : "Authentication was successful, but no account was found so a new account was created. Access and refresh tokens returned.",
            "schema" : {
              "$ref" : "#/definitions/Token"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/authFailed"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "501" : {
            "$ref" : "#/responses/notImplemented"
          }
        },
        "tags" : [ "auth" ]
      }
    },
    "/ott/managedUsers/{groupId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      } ],
      "post" : {
        "summary" : "add a new managed user",
        "operationId" : "ottAddManagedUser",
        "description" : "Add a new managed user to the specified group.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Request to add a managed user",
          "schema" : {
            "$ref" : "#/definitions/OttAddManagedUserRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Success, information on the new user",
            "schema" : {
              "$ref" : "#/definitions/OttAddManagedUserResult"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "501" : {
            "$ref" : "#/responses/notImplemented"
          }
        },
        "tags" : [ "ott" ]
      }
    },
    "/ott/managedUsers/{groupId}/{userId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "delete" : {
        "summary" : "remove a managed user",
        "operationId" : "ottRemoveManagedUser",
        "description" : "Remove a managed user from the specified group and all devices associated with that user.",
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "501" : {
            "$ref" : "#/responses/notImplemented"
          }
        },
        "tags" : [ "ott" ]
      }
    },
    "/vzw/signup" : {
      "get" : {
        "summary" : "Given a ring signup token, fetch signup information",
        "operationId" : "getSignupInfo",
        "description" : "The endpoint returns necessary information about the account to start up the signup process.",
        "tags" : [ "signup" ],
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an object containing potential roles and features for the lines in the account.",
            "schema" : {
              "$ref" : "#/definitions/VzwSignupInfo"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "description" : "403 - Returned when the caller tries to perform a forbidden operation.",
            "schema" : {
              "$ref" : "#/definitions/SignupForbiddenResponse"
            }
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        }
      },
      "post" : {
        "summary" : "Given a ring signup token and signup request, signup the account.",
        "operationId" : "signup",
        "description" : "The endpoint registers the user to our service in the desired state.",
        "tags" : [ "signup" ],
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        }, {
          "name" : "request",
          "in" : "body",
          "description" : "Request data for signing up an account",
          "schema" : {
            "$ref" : "#/definitions/SignupRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "202" : {
            "$ref" : "#/responses/accepted"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "description" : "403 - Returned when the caller tries to perform a forbidden operation.",
            "schema" : {
              "$ref" : "#/definitions/SignupForbiddenResponse"
            }
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        }
      }
    },
    "/vzw/signup/status" : {
      "get" : {
        "summary" : "Get the signup status for the user",
        "operationId" : "getSignupStatus",
        "description" : "This call happens after the user has already requested to signup their account to our service. Since the signup call is asynchronous, we make this call to poll the status of the provisioning request.",
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a singup status containing the progress",
            "schema" : {
              "$ref" : "#/definitions/VzwSignupStatus"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "description" : "403 - Returned when the caller tries to perform a forbidden operation.",
            "schema" : {
              "$ref" : "#/definitions/SignupStatusForbiddenResponse"
            }
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "signup" ]
      }
    },
    "/vzw/signup/conflicts" : {
      "post" : {
        "summary" : "Resolve activation conflicts that were propogated during signup",
        "operationId" : "resolveActivationConflicts",
        "description" : "During a signup, there can be conflicts on the account that block it from being activated into our service. These conflicts require user intervention, and are shown to a user in the getSignupStatus. If the user agrees and wants to allow us to make necessary changes to their accounts (or not), we make this call to proceed (or abort) the signup procedure.\nIn Verizon, there can be other features on the account which block us from being able to add FamilyBase on their line so we present the user with all of the billing changes - the user has 2 options:\n  - Accept: we continue the signup process and Verizon makes necessary changes\n  - Reject: we clean up our internal state and everything is like they've never\n            tried signing up.",
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        }, {
          "name" : "request",
          "in" : "body",
          "description" : "Request data for resolving activation conflicts",
          "schema" : {
            "$ref" : "#/definitions/SignupConflictResolutionRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "202" : {
            "$ref" : "#/responses/accepted"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "description" : "403 - Returned when the caller tries to perform a forbidden operation.",
            "schema" : {
              "$ref" : "#/definitions/SignupConflictsForbiddenResponse"
            }
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "signup" ]
      }
    },
    "/vzw/phoneActivity/{groupId}/{userId}/events" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "get" : {
        "summary" : "INCUBATING get phone activity events",
        "operationId" : "getPhoneActivityEvents",
        "tags" : [ "phoneActivity" ],
        "description" : "Get phone activity events for the specified user. Events are returned in descending timestamp order (newest first).",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Minimum record date, inclusive.",
          "type" : "string",
          "format" : "date-time",
          "required" : true
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Maximum record date, exclusive.",
          "type" : "string",
          "format" : "date-time",
          "required" : true
        }, {
          "name" : "activityTypes",
          "in" : "query",
          "description" : "Activity types to return. If omitted, all types will be returned.",
          "type" : "array",
          "collectionFormat" : "csv",
          "items" : {
            "type" : "string",
            "enum" : [ "CALL", "SMS", "MMS" ]
          }
        }, {
          "name" : "contactMdns",
          "in" : "query",
          "description" : "List of contact MDNs to query. If not present, will retrieve activity for all MDNs.",
          "type" : "array",
          "collectionFormat" : "csv",
          "items" : {
            "type" : "string"
          }
        }, {
          "name" : "maxEvents",
          "in" : "query",
          "description" : "Maximum events to return. If more events are available, the most recent events will be returned. The client can omit this value to receive as many results as possible.  Note: the server may impose a hard safety limit on the number of results returned regardless of the requested value.",
          "type" : "integer",
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Query success, list of events returned.",
            "schema" : {
              "$ref" : "#/definitions/PhoneActivityEvents"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "501" : {
            "$ref" : "#/responses/notImplemented"
          }
        }
      }
    },
    "/vzw/phoneActivity/{groupId}/{userId}/aggregates" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "get" : {
        "summary" : "INCUBATING get phone activity aggregates",
        "operationId" : "getPhoneActivityAggregates",
        "tags" : [ "phoneActivity" ],
        "description" : "Get phone activity aggregates for the specified user.",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "requestedAggregates",
          "in" : "query",
          "description" : "Requested aggregates.  If not specified, all aggregates will be returned.",
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "call", "smsMms" ]
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Start date of query, inclusive.",
          "required" : true,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "End date of query, exclusive.",
          "required" : true,
          "type" : "string",
          "format" : "date-time"
        } ],
        "responses" : {
          "200" : {
            "description" : "Query success, aggregates returned.",
            "schema" : {
              "$ref" : "#/definitions/PhoneActivityAggregatesContainer"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "description" : "Specified group or user not found.",
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "501" : {
            "$ref" : "#/responses/notImplemented"
          }
        }
      }
    },
    "/carrier/networkLocate/{groupId}/{userId}" : {
      "post" : {
        "summary" : "INCUBATING request network locate",
        "operationId" : "networkRequest",
        "description" : "Request that the server perform a network location request for the device with the provided userId. Results will be posted via PubNub to admins in the supplied group. The supplied access token must grant admin rights to the supplied group.",
        "parameters" : [ {
          "$ref" : "#/parameters/adminAccessToken"
        }, {
          "$ref" : "#/parameters/groupId"
        }, {
          "$ref" : "#/parameters/userId"
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbiddenLocate"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "locate" ]
      }
    },
    "/vzw/notificationSettings/{groupId}/{userId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "get" : {
        "summary" : "INCUBATING get notification settings",
        "operationId" : "getNotificationSettings",
        "description" : "Get notification settings for the specified user, who must be a managed user. Trying to access settings for a non-managed (e.g. admin) user results in a not found error.\nThese settings are for the admin user to receive notifications for activities that they would like to be notified on for each of their managed users.",
        "consumes" : [ ],
        "responses" : {
          "200" : {
            "description" : "Query success, aggregates returned",
            "schema" : {
              "$ref" : "#/definitions/VzwNotificationSettings"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "501" : {
            "$ref" : "#/responses/notImplemented"
          }
        },
        "tags" : [ "notificationSettings" ]
      },
      "patch" : {
        "summary" : "INCUBATING update notification settings",
        "operationId" : "updateNotificationSettings",
        "description" : "Update (i.e. replace) notification settings for the specified user, who must be a managed user. Trying to access settings for a non-managed (e.g. admin) user results in a not found error.\nThese settings are for the admin user to receive notifications for activities that they would like to be notified on for each of their managed users.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Data for notification settings",
          "schema" : {
            "$ref" : "#/definitions/VzwNotificationSettings"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "501" : {
            "$ref" : "#/responses/notImplemented"
          }
        },
        "tags" : [ "notificationSettings" ]
      }
    },
    "/vzw/usageControls/callBlockPreferences/{groupId}/{userId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "get" : {
        "summary" : "INCUBATING get the call block preferences",
        "operationId" : "getCallBlockPreferences",
        "description" : "Get all of the call block preferences for the specified user in the specified group.",
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation successful, call block preferences returned.",
            "schema" : {
              "$ref" : "#/definitions/VzwCallBlockPreferences"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "502" : {
            "$ref" : "#/responses/badGateway"
          },
          "503" : {
            "$ref" : "#/responses/serviceUnavailable"
          }
        },
        "tags" : [ "usageControls" ]
      },
      "put" : {
        "summary" : "INCUBATING update call block preferences",
        "operationId" : "updateCallBlockPreferences",
        "description" : "Update call block preferences for the specified user in the specified group",
        "parameters" : [ {
          "$ref" : "#/parameters/adminAccessToken"
        }, {
          "name" : "request",
          "in" : "body",
          "description" : "The call block preferences to update.",
          "schema" : {
            "$ref" : "#/definitions/VzwCallBlockPreferences"
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "502" : {
            "$ref" : "#/responses/badGateway"
          },
          "503" : {
            "$ref" : "#/responses/serviceUnavailable"
          }
        },
        "tags" : [ "usageControls" ]
      }
    },
    "/vzw/usageControls/contacts/{groupId}/{userId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "get" : {
        "summary" : "INCUBATING get all contacts matching search params",
        "operationId" : "getUsageControlsContacts",
        "description" : "Get all contacts of the given type for the specified user in the specified group.  If type is not specified, get all trusted and all blocked contacts.",
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type of contact is either BLOCKED or TRUSTED.\nIf type is not provided then both types of contacts are returned.",
          "type" : "string",
          "enum" : [ "BLOCKED", "TRUSTED" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation successful, contacts returned.",
            "schema" : {
              "description" : "List of contacts.",
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/VzwUsageControlsContact"
              },
              "minItems" : 0
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "502" : {
            "$ref" : "#/responses/badGateway"
          },
          "503" : {
            "$ref" : "#/responses/serviceUnavailable"
          }
        },
        "tags" : [ "usageControls" ]
      },
      "post" : {
        "summary" : "INCUBATING add a contact with the given type",
        "operationId" : "addUsageControlsContact",
        "description" : "Add a blocked/trusted contact to the specified user in the specified group.",
        "parameters" : [ {
          "$ref" : "#/parameters/adminAccessToken"
        }, {
          "name" : "request",
          "in" : "body",
          "description" : "Data for contact to create.",
          "schema" : {
            "$ref" : "#/definitions/VzwUsageControlsContact"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "502" : {
            "$ref" : "#/responses/badGateway"
          },
          "503" : {
            "$ref" : "#/responses/serviceUnavailable"
          }
        },
        "tags" : [ "usageControls" ]
      },
      "patch" : {
        "summary" : "INCUBATING update a contact",
        "operationId" : "updateUsageControlsContact",
        "description" : "Update an existing contact for a specified user in the specified group.",
        "parameters" : [ {
          "$ref" : "#/parameters/adminAccessToken"
        }, {
          "name" : "request",
          "in" : "body",
          "description" : "The changes to the contact.",
          "schema" : {
            "$ref" : "#/definitions/VzwUsageControlsModifyContact"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Updated details of contact.",
            "schema" : {
              "$ref" : "#/definitions/VzwUsageControlsContact"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "502" : {
            "$ref" : "#/responses/badGateway"
          },
          "503" : {
            "$ref" : "#/responses/serviceUnavailable"
          }
        },
        "tags" : [ "usageControls" ]
      },
      "delete" : {
        "summary" : "INCUBATING remove a contact",
        "operationId" : "deleteUsageControlsContact",
        "description" : "Remove a contact from the specified user in the specified group.",
        "parameters" : [ {
          "$ref" : "#/parameters/adminAccessToken"
        }, {
          "name" : "request",
          "in" : "body",
          "description" : "The contact to remove.",
          "schema" : {
            "$ref" : "#/definitions/VzwUsageControlsContactIdentifier"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "502" : {
            "$ref" : "#/responses/badGateway"
          },
          "503" : {
            "$ref" : "#/responses/serviceUnavailable"
          }
        },
        "tags" : [ "usageControls" ]
      }
    },
    "/vzw/usageControls/limits/{groupId}/{userId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "get" : {
        "summary" : "INCUBATING get details of all limits",
        "operationId" : "getAllLimits",
        "description" : "Get a full list of all limits that currently exist for the specified user in the specified group.  If type is not specified, get all types of limits.",
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type of limit.",
          "type" : "string",
          "enum" : [ "CALL", "DATA", "PURCHASE", "TEXT" ],
          "required" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation successful, list of limits returned.",
            "schema" : {
              "description" : "List of limits.",
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/VzwLimit"
              },
              "minItems" : 0
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "502" : {
            "$ref" : "#/responses/badGateway"
          },
          "503" : {
            "$ref" : "#/responses/serviceUnavailable"
          }
        },
        "tags" : [ "usageControls" ]
      },
      "put" : {
        "summary" : "INCUBATING update a limit",
        "operationId" : "updateLimit",
        "description" : "Update a limit for the specified user in the specified group",
        "parameters" : [ {
          "$ref" : "#/parameters/adminAccessToken"
        }, {
          "name" : "request",
          "in" : "body",
          "description" : "Data for the limit to update.",
          "schema" : {
            "$ref" : "#/definitions/VzwUpdateLimitRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "502" : {
            "$ref" : "#/responses/badGateway"
          },
          "503" : {
            "$ref" : "#/responses/serviceUnavailable"
          }
        },
        "tags" : [ "usageControls" ]
      }
    },
    "/vzw/usageControls/timeRestrictions/{groupId}/{userId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "get" : {
        "summary" : "INCUBATING get details of all time restrictions",
        "operationId" : "getAllTimeRestrictions",
        "description" : "Get a full list of all time restrictions that currently exist for the specified user in the specified group.",
        "parameters" : [ {
          "$ref" : "#/parameters/accessToken"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation successful, list of time restrictions returned.",
            "schema" : {
              "description" : "List of time restrictions.",
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/VzwTimeRestriction"
              },
              "minItems" : 0
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "502" : {
            "$ref" : "#/responses/badGateway"
          },
          "503" : {
            "$ref" : "#/responses/serviceUnavailable"
          }
        },
        "tags" : [ "usageControls" ]
      },
      "post" : {
        "summary" : "INCUBATING add a new time restriction",
        "operationId" : "addTimeRestriction",
        "description" : "Add a new time restriction to the specified user in the specified group.",
        "parameters" : [ {
          "$ref" : "#/parameters/adminAccessToken"
        }, {
          "name" : "request",
          "in" : "body",
          "description" : "Data for time restriction to create.",
          "schema" : {
            "$ref" : "#/definitions/VzwTimeRestrictionFields"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of created time restriction, including ID.",
            "schema" : {
              "$ref" : "#/definitions/VzwTimeRestriction"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "409" : {
            "$ref" : "#/responses/conflict"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "502" : {
            "$ref" : "#/responses/badGateway"
          },
          "503" : {
            "$ref" : "#/responses/serviceUnavailable"
          }
        },
        "tags" : [ "usageControls" ]
      }
    },
    "/vzw/usageControls/timeRestrictions/{groupId}/{userId}/{timeRestrictionId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      }, {
        "name" : "timeRestrictionId",
        "in" : "path",
        "description" : "ID of the time restriction affected by this operation.",
        "type" : "string",
        "required" : true
      } ],
      "put" : {
        "summary" : "INCUBATING update a time restriction",
        "operationId" : "updateTimeRestriction",
        "description" : "Update an existing time restriction.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Information to set in time restriction.",
          "schema" : {
            "$ref" : "#/definitions/VzwTimeRestrictionFields"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Updated details of time restriction.",
            "schema" : {
              "$ref" : "#/definitions/VzwTimeRestriction"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "502" : {
            "$ref" : "#/responses/badGateway"
          },
          "503" : {
            "$ref" : "#/responses/serviceUnavailable"
          }
        },
        "tags" : [ "usageControls" ]
      },
      "delete" : {
        "summary" : "INCUBATING remove a time restriction",
        "operationId" : "deleteTimeRestriction",
        "description" : "Remove a time restriction from this user.",
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "502" : {
            "$ref" : "#/responses/badGateway"
          },
          "503" : {
            "$ref" : "#/responses/serviceUnavailable"
          }
        },
        "tags" : [ "usageControls" ]
      }
    },
    "/vzw/activityWindows/{groupId}/{userId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/accessToken"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "get" : {
        "summary" : "Query for all the activity windows",
        "operationId" : "getActivityWindowsForUser",
        "tags" : [ "activityWindows" ],
        "description" : "Query for all the activity windows associated with a certain userId.",
        "consumes" : [ ],
        "responses" : {
          "200" : {
            "description" : "Activity windows wrapper object for school and night hours",
            "schema" : {
              "$ref" : "#/definitions/VzWActivityWindowResponse"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "501" : {
            "$ref" : "#/responses/notImplemented"
          }
        }
      }
    },
    "/vzw/activityWindows/{groupId}/{userId}/{windowId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/accessToken"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      }, {
        "name" : "windowId",
        "in" : "path",
        "description" : "ID of the time activity window affected by this operation.",
        "type" : "string",
        "required" : true
      } ],
      "put" : {
        "summary" : "Update the existing activity window for given user",
        "operationId" : "updateActivityWindowForUser",
        "tags" : [ "activityWindows" ],
        "description" : "Update the existing activity window for given user",
        "parameters" : [ {
          "name" : "activityWindow",
          "description" : "Activity window's data",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/VzwActivityWindow"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/responses/successNoResponse"
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "501" : {
            "$ref" : "#/responses/notImplemented"
          }
        }
      }
    },
    "/vzw/subscription/{groupId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      } ],
      "get" : {
        "summary" : "INCUBATING get details for family members on the plan",
        "operationId" : "getSubscription",
        "description" : "Get information for family members on a plan. A family member corresponds to a line on the plan.",
        "consumes" : [ ],
        "responses" : {
          "200" : {
            "description" : "Query success, subscription is returned",
            "schema" : {
              "$ref" : "#/definitions/VzwSubscription"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "501" : {
            "$ref" : "#/responses/notImplemented"
          }
        },
        "tags" : [ "subscription" ]
      }
    },
    "/vzw/subscription/{groupId}/request" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      } ],
      "post" : {
        "summary" : "INCUBATING create a request to update the subscription",
        "operationId" : "updateSubscriptionRequest",
        "description" : "Create a request to update the subscription. This is used to update (i.e. replace) details for the family members in the subscription.\n* There is no immediate result for this call. The client gets a unique\n  identifier for the request. The client must poll `GET\n  /vzw/subscription/{groupId}/request/{requestId}` to get the status for\n  the request, where `requestId` is the identifier received with this\n  request.",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "Data for updating the subscription.",
          "schema" : {
            "$ref" : "#/definitions/VzwUpdateSubscriptionRequest"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "A request to change the subscription has been created.",
            "schema" : {
              "$ref" : "#/definitions/VzwUpdateSubscriptionResponse"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "501" : {
            "$ref" : "#/responses/notImplemented"
          }
        },
        "tags" : [ "subscription" ]
      }
    },
    "/vzw/subscription/{groupId}/request/{requestId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "name" : "requestId",
        "in" : "path",
        "description" : "A unique identifier for the request.",
        "type" : "string",
        "required" : true
      } ],
      "get" : {
        "summary" : "INCUBATING get the status for the request to update subscription",
        "operationId" : "getUpdateSubscriptionRequestStatus",
        "description" : "Get the status for the request to update subscription for a family.",
        "consumes" : [ ],
        "responses" : {
          "200" : {
            "description" : "The status for the request to update subscription.",
            "schema" : {
              "$ref" : "#/definitions/VzwUpdateSubscriptionStatusResponse"
            }
          },
          "400" : {
            "$ref" : "#/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          },
          "501" : {
            "$ref" : "#/responses/notImplemented"
          }
        },
        "tags" : [ "subscription" ]
      }
    },
    "/vzw/contacts/{groupId}/{userId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "get" : {
        "summary" : "INCUBATING Get all contacts of a specific user.",
        "operationId" : "getContacts",
        "description" : "Get all contacts of a specific user. If there are no phone numbers for a contact, this contact is not returned.",
        "responses" : {
          "200" : {
            "description" : "The user's contacts list",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/VzwContact"
              },
              "minItems" : 0
            }
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "contacts" ]
      }
    },
    "/vzw/contacts/{groupId}/{userId}/{contactId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/adminAccessToken"
      }, {
        "$ref" : "#/parameters/llCorrelationId"
      }, {
        "$ref" : "#/parameters/groupId"
      }, {
        "$ref" : "#/parameters/userId"
      } ],
      "put" : {
        "summary" : "INCUBATING Update fields of an existing contact.",
        "operationId" : "updateContact",
        "description" : "Update fields of an existing contact.",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "Unique identifier for a contact.",
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 64,
          "required" : true
        }, {
          "name" : "request",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/VzwContactEditableFields"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The contact with the modified fields.",
            "schema" : {
              "$ref" : "#/definitions/VzwContact"
            }
          },
          "401" : {
            "$ref" : "#/responses/badToken"
          },
          "403" : {
            "$ref" : "#/responses/forbidden"
          },
          "404" : {
            "$ref" : "#/responses/notFound"
          },
          "406" : {
            "$ref" : "#/responses/badAcceptHeader"
          },
          "500" : {
            "$ref" : "#/responses/internalError"
          }
        },
        "tags" : [ "contacts" ]
      }
    }
  },
  "parameters" : {
    "llCorrelationId" : {
      "name" : "LL-Correlation-Id",
      "in" : "header",
      "type" : "string",
      "description" : "An identifier used to track the current request chain",
      "required" : false
    },
    "accessToken" : {
      "name" : "accessToken",
      "in" : "header",
      "description" : "Access token. This can be a token with either a user claim, an admin claim, or both.",
      "type" : "string",
      "required" : true
    },
    "adminAccessToken" : {
      "name" : "accessToken",
      "in" : "header",
      "description" : "Access token. This must be an access token with an admin claim; the token may have other claims.",
      "type" : "string",
      "required" : true
    },
    "groupId" : {
      "name" : "groupId",
      "in" : "path",
      "description" : "Unique ID of the group to which this operation should apply.",
      "type" : "string",
      "minLength" : 4,
      "maxLength" : 64,
      "required" : true
    },
    "userId" : {
      "name" : "userId",
      "in" : "path",
      "description" : "Unique ID of the user to which this operation should apply.",
      "type" : "string",
      "minLength" : 4,
      "maxLength" : 64,
      "required" : true
    },
    "deviceId" : {
      "name" : "deviceId",
      "in" : "path",
      "description" : "ID of device affected by call",
      "type" : "string",
      "maxLength" : 64,
      "required" : true
    }
  },
  "responses" : {
    "badRequest" : {
      "description" : "400 - The request was malformed or missing a required field.",
      "schema" : {
        "$ref" : "#/definitions/BadRequestResponse"
      }
    },
    "badToken" : {
      "description" : "401 - Returned when an authenticated API is called with a cryptographically invalid token, when the type of token didn't meet the requirements of the API call, or when the API call required a token and none was provided. Since tokens are signed and don't expire (though they may become invalid), this should only be seen in the case of a client bug or a data storage/corruption issue.",
      "schema" : {
        "$ref" : "#/definitions/BadTokenResponse"
      }
    },
    "forbidden" : {
      "description" : "403 - Returned when the caller tries to perform a forbidden operation. More details are provided in the reason.",
      "schema" : {
        "$ref" : "#/definitions/ForbiddenResponse"
      }
    },
    "badAcceptHeader" : {
      "description" : "406 - The \"accept\" header sent doesn't allow this method to return \"application/json\" content.",
      "schema" : {
        "$ref" : "#/definitions/BadAcceptHeaderResponse"
      }
    },
    "internalError" : {
      "description" : "500 - The server encountered an internal error while processing this request.",
      "schema" : {
        "$ref" : "#/definitions/InternalErrorResponse"
      }
    },
    "successNoResponse" : {
      "description" : "204 - The request was successful. No response body will be returned."
    },
    "refreshTokenSuccess" : {
      "description" : "200 - Token refresh was completed with no issues, and an updated access token was created.",
      "schema" : {
        "$ref" : "#/definitions/RefreshTokenResponse"
      }
    },
    "badRefreshToken" : {
      "description" : "401 - Returned when refresh token is called with an invalid refresh token.",
      "schema" : {
        "$ref" : "#/definitions/BadRefreshTokenResponse"
      }
    },
    "forbiddenRefresh" : {
      "description" : "403 - Forbidden response for token refresh operation.",
      "schema" : {
        "$ref" : "#/definitions/ForbiddenRefreshResponse"
      }
    },
    "authFailed" : {
      "description" : "401 - Authentication failed due to security reasons.",
      "schema" : {
        "$ref" : "#/definitions/AuthFailedResponse"
      }
    },
    "notFound" : {
      "description" : "404 - The requested resource could not be found.",
      "schema" : {
        "$ref" : "#/definitions/NotFoundResponse"
      }
    },
    "notImplemented" : {
      "description" : "501 - The requested method is not implemented.",
      "schema" : {
        "$ref" : "#/definitions/NotImplementedResponse"
      }
    },
    "conflict" : {
      "description" : "409 - Returned when the caller tries to create a resource that already exists or conflicts with an existing resource",
      "schema" : {
        "$ref" : "#/definitions/ConflictResponse"
      }
    },
    "accepted" : {
      "description" : "202 - The request has been accepted for processing / execution and is in progress, though it is not yet complete.",
      "schema" : { }
    },
    "forbiddenLocate" : {
      "description" : "403 - The admin is not allowed to locate this userid.",
      "schema" : {
        "$ref" : "#/definitions/ForbiddenLocateResponse"
      }
    },
    "badGateway" : {
      "description" : "502 - The server received an unexpected response from an upstream server.",
      "schema" : {
        "$ref" : "#/definitions/BadGatewayResponse"
      }
    },
    "serviceUnavailable" : {
      "description" : "503 - The server is currently unable to handle the request.",
      "schema" : {
        "$ref" : "#/definitions/ServiceUnavailableResponse"
      }
    }
  },
  "definitions" : {
    "BadRequestResponse" : {
      "description" : "Optional information about how the request was bad.",
      "type" : "object",
      "properties" : {
        "fieldName" : {
          "description" : "If this error was due to a particular field, this is the name of that field.",
          "type" : "string"
        },
        "message" : {
          "description" : "A text message, presented primarily for dev/qa/troubleshooting purposes.",
          "type" : "string"
        }
      }
    },
    "BadTokenResponse" : {
      "description" : "Information about how the token was bad.",
      "type" : "object",
      "properties" : {
        "reason" : {
          "$ref" : "#/definitions/BadTokenReason"
        },
        "cause" : {
          "$ref" : "#/definitions/BadTokenCauses"
        }
      },
      "required" : [ "cause" ]
    },
    "BadTokenReason" : {
      "description" : "This is now deprecated and the clients should use 'cause' instead\nDescribes the specific case.\n - INVALID_TOKEN : the token supplied was cryptographically invalid\n - MISSING_CLAIM : the token supplied did not contain a claim that was\n   required for this method.\n - EXPIRED : the token contained a \"exp\" expiration date field, and that date\n   is in the past.",
      "type" : "string",
      "enum" : [ "INVALID_TOKEN", "MISSING_CLAIM", "EXPIRED" ]
    },
    "BadTokenCauses" : {
      "description" : "Cause for this badToken response",
      "type" : "object",
      "properties" : {
        "invalidToken" : {
          "description" : "The token supplied was cryptographically invalid",
          "type" : "boolean"
        },
        "missingClaim" : {
          "description" : "The token supplied did not contain a claim that was required for this method.",
          "type" : "boolean"
        },
        "expired" : {
          "description" : "The token contained a \"exp\" expiration date field, and that date is in the past.",
          "type" : "boolean"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "ForbiddenResponse" : {
      "description" : "Information on why this result was obtained.",
      "type" : "object",
      "properties" : {
        "reason" : {
          "$ref" : "#/definitions/ForbiddenReason"
        },
        "cause" : {
          "$ref" : "#/definitions/ForbiddenCauses"
        }
      },
      "required" : [ "cause" ]
    },
    "ForbiddenReason" : {
      "description" : "This is now deprecated and the clients should use 'cause' instead\nReason why operation was forbidden. Possible values are:\n  - NO_ACTIVE_ACCOUNT: The Ring account associated with this token has been\n    closed.\n  - FEATURE_UNAVAILABLE_FOR_ACCOUNT: The resource is associated with a feature that is not\n    enabled for account",
      "type" : "string",
      "enum" : [ "NO_ACTIVE_ACCOUNT", "FEATURE_UNAVAILABLE_FOR_ACCOUNT" ]
    },
    "ForbiddenCauses" : {
      "description" : "Cause for this forbidden response",
      "type" : "object",
      "properties" : {
        "noActiveAccount" : {
          "description" : "There is no account associated with the holder of the token. This may be because the account has been closed or suspended.",
          "type" : "boolean"
        },
        "featureUnavailableForAccount" : {
          "description" : "The resource is associated with a feature that is not enabled for the account",
          "type" : "boolean"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "BadAcceptHeaderResponse" : {
      "description" : "Information on why this result was obtained.",
      "type" : "object",
      "properties" : {
        "message" : {
          "description" : "A text message, presented primarily for dev/qa/troubleshooting purposes.",
          "type" : "string"
        }
      }
    },
    "InternalErrorResponse" : {
      "description" : "Optional information on why this result was obtained.",
      "type" : "object",
      "properties" : {
        "message" : {
          "description" : "A text message, presented primarily for dev/qa/troubleshooting purposes.",
          "type" : "string"
        }
      }
    },
    "RefreshTokenResponse" : {
      "description" : "Successful response from \"POST /refreshToken\".",
      "type" : "object",
      "properties" : {
        "accessToken" : {
          "description" : "An access token with same claims as submitted refresh token.",
          "type" : "string",
          "format" : "password"
        },
        "refreshToken" : {
          "description" : "A replacement refresh token which should be used for future refresh operations. This may or may not be the same as the input refresh token.",
          "type" : "string",
          "format" : "password"
        }
      },
      "required" : [ "accessToken", "refreshToken" ]
    },
    "BadRefreshTokenResponse" : {
      "description" : "Information about how the refresh token was bad.",
      "type" : "object",
      "properties" : {
        "reason" : {
          "$ref" : "#/definitions/BadRefreshTokenReason"
        },
        "cause" : {
          "$ref" : "#/definitions/BadRefreshTokenCauses"
        }
      },
      "required" : [ "cause" ]
    },
    "BadRefreshTokenReason" : {
      "description" : "This is now deprecated and the clients should use 'cause' instead\nDescribes the specific case.\n - INVALID_TOKEN: the token supplied was cryptographically invalid or\n   had invalid contents.",
      "type" : "string",
      "enum" : [ "INVALID_TOKEN" ]
    },
    "BadRefreshTokenCauses" : {
      "description" : "Cause for this bad refresh token response",
      "type" : "object",
      "properties" : {
        "invalidToken" : {
          "description" : "The token supplied was cryptographically invalid or had invalid contents.",
          "type" : "boolean"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "ForbiddenRefreshResponse" : {
      "description" : "Information on why this result was obtained.",
      "type" : "object",
      "properties" : {
        "reason" : {
          "$ref" : "#/definitions/ForbiddenRefreshReason"
        },
        "cause" : {
          "$ref" : "#/definitions/ForbiddenRefreshCauses"
        }
      },
      "required" : [ "cause" ]
    },
    "ForbiddenRefreshReason" : {
      "description" : "This is now deprecated and the clients should use 'cause' instead\nReason why operation was forbidden. Possible values are:\n  - NO_ACTIVE_ACCOUNT: the Ring account associated with this token has been closed.\n  - TOKEN_INVALIDATED: some credential in the token supplied has been invalidated\n    by backend changes since it was obtained. The user must activate or log in\n    again.",
      "type" : "string",
      "enum" : [ "NO_ACTIVE_ACCOUNT", "TOKEN_INVALIDATED" ]
    },
    "ForbiddenRefreshCauses" : {
      "description" : "Cause for this forbidden response",
      "type" : "object",
      "properties" : {
        "noActiveAccount" : {
          "description" : "There is no account associated with the holder of the token. This may be because the account has been closed or suspended.",
          "type" : "boolean"
        },
        "tokenInvalidated" : {
          "description" : "Some credential in the token supplied has been invalidated by backend changes since it was obtained. The user must activate or log in again.",
          "type" : "boolean"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "AuthFailedResponse" : {
      "type" : "object",
      "properties" : {
        "reason" : {
          "description" : "This is now deprecated and the clients should use 'cause' instead\nPossible reasons are:\n  - AUTH_FAILED: The credentials supplied are incorrect.\n  - LOCKED: The account/resource has been locked due to too frequent failed\n          login attempts.\n  - NOT_AUTHORIZED: The credentials are correct but the user is not\n                    authorized to use the application.",
          "type" : "string"
        },
        "cause" : {
          "$ref" : "#/definitions/AuthFailedCauses"
        }
      },
      "required" : [ "cause" ]
    },
    "AuthFailedCauses" : {
      "description" : "Cause for this auth failed response",
      "type" : "object",
      "properties" : {
        "authFailed" : {
          "description" : "The credentials supplied are incorrect.",
          "type" : "boolean"
        },
        "locked" : {
          "description" : "The account/resource has been locked due to too frequent failed login attempts.",
          "type" : "boolean"
        },
        "notAuthorized" : {
          "description" : "The credentials are correct but the user is not authorized to use the application.",
          "type" : "boolean"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "NotFoundResponse" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "description" : "A text message, presented primarily for dev/qa/troubleshooting purposes.",
          "type" : "string"
        }
      }
    },
    "NotImplementedResponse" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "description" : "A text message, presented primarily for dev/qa/troubleshooting purposes.",
          "type" : "string"
        }
      }
    },
    "ConflictResponse" : {
      "description" : "Information on why this result was obtained.",
      "type" : "object",
      "properties" : {
        "message" : {
          "description" : "A text message, presented primarily for dev/qa/troubleshooting purposes.",
          "type" : "string"
        }
      }
    },
    "ForbiddenLocateResponse" : {
      "description" : "Information about why the admin was unable to locate this user.",
      "type" : "object",
      "properties" : {
        "reason" : {
          "$ref" : "#/definitions/ForbiddenLocateReason"
        },
        "cause" : {
          "$ref" : "#/definitions/ForbiddenLocateCauses"
        }
      },
      "required" : [ "cause" ]
    },
    "ForbiddenLocateReason" : {
      "description" : "This is now deprecated and the clients should use 'cause' instead\nReason why this user is not allowed to locate this user:\n  - NO_ACTIVE_ACCOUNT: There is no carrier account associated with the holder of\n    the token. This may be because the account has been closed or\n    suspended.\n  - USER_NOT_SHARING_LOCATION: This user is not configured to share location with\n    the calling user\n  - FEATURE_UNAVAILABLE_FOR_ACCOUNT: The resource is associated with a feature that\n    is not enabled for account",
      "type" : "string",
      "enum" : [ "NO_ACTIVE_ACCOUNT", "USER_NOT_SHARING_LOCATION", "FEATURE_UNAVAILABLE_FOR_ACCOUNT" ]
    },
    "ForbiddenLocateCauses" : {
      "description" : "Cause for this forbidden response",
      "allOf" : [ {
        "$ref" : "#/definitions/ForbiddenCauses"
      }, {
        "type" : "object",
        "properties" : {
          "userNotSharingLocation" : {
            "description" : "This user is not configured to share location with the calling user",
            "type" : "boolean"
          }
        }
      } ]
    },
    "BadGatewayResponse" : {
      "description" : "Optional information on why this result was obtained.",
      "type" : "object",
      "properties" : {
        "message" : {
          "description" : "The server received an unexpected response from an upstream server it accessed in attempting to fulfill the request.",
          "type" : "string"
        }
      }
    },
    "ServiceUnavailableResponse" : {
      "description" : "Optional information on why this result was obtained.",
      "type" : "object",
      "properties" : {
        "message" : {
          "description" : "The server is currently unable to handle the request.",
          "type" : "string"
        }
      }
    },
    "OverviewResponse" : {
      "description" : "Object containing collected information for the current user and their group.",
      "type" : "object",
      "properties" : {
        "me" : {
          "$ref" : "#/definitions/Me"
        },
        "systemInfo" : {
          "$ref" : "#/definitions/SystemInfo"
        },
        "group" : {
          "$ref" : "#/definitions/Group"
        },
        "places" : {
          "description" : "A list of all places in this group",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Place"
          }
        },
        "lastKnowns" : {
          "description" : "List of \"last known\" info structures, one for each member of this group.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LastKnownInfo"
          }
        },
        "users" : {
          "description" : "A user record for every user in this group.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/User"
          },
          "minItems" : 1
        },
        "controlsSettingsList" : {
          "description" : "Controls settings for all managed users in this group.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ControlsSettings"
          },
          "minItems" : 0
        },
        "devices" : {
          "$ref" : "#/definitions/ManagedDevicesByUsers"
        }
      }
    },
    "Me" : {
      "description" : "Information about the current user.",
      "type" : "object",
      "properties" : {
        "userId" : {
          "description" : "ID for the current user",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        },
        "groupId" : {
          "description" : "ID for the (single) group of which this user is a member.",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        },
        "deviceId" : {
          "description" : "Unique ID of device associated with this login session, i.e. the ID of the device from which the user logged in. Optional.",
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 64
        },
        "isAdmin" : {
          "description" : "Indicates whether the current user is an admin for their group.",
          "type" : "boolean"
        },
        "clientSettings" : {
          "description" : "Per-user settings blob used by the client. This is intended to allow a client to store user-provided settings, so that they can be restored in the event of a client reinstall. Data in here is opaque to the server, but is shared between ALL clients for the user ID across all platforms.\n\nNote that since the return type here is a string, if the content is JSON or some other data, it will need to be parsed as a separate step.",
          "type" : "string"
        },
        "features" : {
          "description" : "A \"list\" of features that are enabled/disabled for the current user.",
          "type" : "object",
          "properties" : {
            "activityDns" : {
              "description" : "Indicates if DNS activity history is enabled.",
              "type" : "boolean",
              "default" : false
            },
            "controls" : {
              "description" : "Indicates if controls (DNS filtering and app blocking) are enabled.",
              "type" : "boolean",
              "default" : false
            },
            "locationDevice" : {
              "description" : "Indicates if device based location is enabled.",
              "type" : "boolean",
              "default" : false
            },
            "locationGeofences" : {
              "description" : "Indicates if geofences are enabled.",
              "type" : "boolean",
              "default" : false
            },
            "locationNetwork" : {
              "description" : "Indicates if network based location is enabled.",
              "type" : "boolean",
              "default" : false
            },
            "locationScheduledChecks" : {
              "description" : "Indicates if scheduled checks are enabled.",
              "type" : "boolean",
              "default" : false
            }
          }
        },
        "pubnubAuthKey" : {
          "description" : "Auth key used to access pubnub channels.",
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "pubnubCipherKeyRecord" : {
          "$ref" : "#/definitions/PubnubCipherKeyRecord"
        },
        "pubnubUserChannelId" : {
          "description" : "ID of the pubnub channel specific to the user. The client should subscribe to this channel on both managed and admin key sets.",
          "type" : "string"
        },
        "broadcastLocatableiOSChannelId" : {
          "description" : "For iOS clients that need to share location, the broadcast channel id it should subscribe to. The pubnub auth service will assign this based on a hash of the user id. The child app will subscribe to this channel to receive broadcast messages, waking the app up so that it can send location. If field is not present (or if client does not need to share location), client doesn't need to do anything with this.",
          "type" : "string"
        },
        "locationSource" : {
          "description" : "True if this device should be used to provide location for parent users. Right now this should only be true for mobile phones.",
          "type" : "boolean"
        }
      },
      "required" : [ "userId", "groupId", "isAdmin", "features", "pubnubAuthKey" ]
    },
    "PubnubCipherKeyRecord" : {
      "description" : "An object comprised of the cipher keys associated with a given group ID, each of which are associated with a unique UUID and an expiration date. There is also a latest UUID field for quick lookups of the most recent cipher key.",
      "type" : "object",
      "properties" : {
        "latest" : {
          "type" : "string",
          "description" : "The UUID of the most recently generated cipher key for the given group ID."
        },
        "cipherKeys" : {
          "type" : "array",
          "description" : "An array of the cipher keys associated with a given group ID.",
          "items" : {
            "$ref" : "#/definitions/PubnubCipherKey"
          },
          "minItems" : 1
        }
      },
      "required" : [ "latest", "cipherKeys" ]
    },
    "PubnubCipherKey" : {
      "description" : "A model that uniquely associated a UUID to a cipher key for a given group ID.",
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The UUID uniquely associated with this object's cipher key, for a given group ID."
        },
        "cipherKey" : {
          "type" : "string",
          "description" : "A symmetric key associated with a group/group ID.",
          "minLength" : 64,
          "maxLength" : 64,
          "format" : "password"
        }
      },
      "required" : [ "id", "cipherKey" ]
    },
    "SystemInfo" : {
      "description" : "Contains information required by the client that is the same across the entire application.",
      "type" : "object",
      "properties" : {
        "cloudinaryCloudName" : {
          "description" : "Cloud name used when fetching image datafrom Cloudinary.",
          "type" : "string"
        },
        "pubnubAdminKeySet" : {
          "$ref" : "#/definitions/PubNubKeyInfo"
        },
        "pubnubManagedKeySet" : {
          "$ref" : "#/definitions/PubNubKeyInfo"
        },
        "categoriesPoliciesLastModified" : {
          "description" : "Time when content categories or predefined policies were last modified. This value will change any time that the content categories or predefined policies change. If this information changes, the client should refetch it using the \"GET /categories/\" and \"GET /policies/\" calls.\n\nIt is possible that only one of these (categories or policies) will have changed, and fetching both is wasteful. It is also possible that this single value may change when items within the policy service that the client does not currently need to know about (e.g. custom policies (those without categories), age) have changed, resulting in false positives. This is okay, as it is expected that this value changes on a relatively infrequent basis.",
          "type" : "string",
          "format" : "date-time"
        },
        "imageUploadUrl" : {
          "description" : "Base url for for image upload and download/resizing. \nCalling \"POST imageUploadUrl\" with image in the body of the request will upload  given image to the S3 storage, and return an \"imageId\" which can be later used  to download/resize the image. It is required to set correct Content-Type for upload image (e.g., \"image/png\" or \"image/jpeg\").\nCalling \"GET imageUploadUrl/{imageId}/{width}/{height}\" using the imageId from the previous service, and given width and height will return the resized image. Both width and height parameters are required integer values.",
          "type" : "string"
        }
      },
      "required" : [ "cloudinaryCloudName", "pubnubAdminKeySet", "pubnubManagedKeySet", "categoriesPoliciesLastModified" ]
    },
    "PubNubKeyInfo" : {
      "description" : "PubNub key set information.",
      "type" : "object",
      "properties" : {
        "publishKey" : {
          "description" : "Publish Key for this key set",
          "type" : "string"
        },
        "subscribeKey" : {
          "description" : "Subscribe Key for this key set",
          "type" : "string"
        }
      },
      "required" : [ "publishKey", "subscribeKey" ]
    },
    "Group" : {
      "description" : "Information about a group. Generally won't change unless group membership or account status changes.",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Unique ID for this group. Should be used when performing operations that relate to this group.",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        },
        "channelInfo" : {
          "$ref" : "#/definitions/ChannelInfo"
        },
        "members" : {
          "description" : "Information about users in this group and their roles.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GroupMember"
          }
        },
        "ownerUserId" : {
          "description" : "Unique user ID for the user in this group who is the \"owner\" for this group.",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        },
        "timezone" : {
          "description" : "Time zone of the owner of this account. This time zone will be used when determining how the user sees time, i.e. in any calculations that cause something to happen at a specific time of day, or to define day boundaries when looking at something that happened on a specific day.\n\nThe API supports standard timezone names in the continent/city or continent/country/city format. e.g. America/Los_Angeles and America/Argentina/Buenos_Aires are supported, but EST, Etc/GMT+1, and US/Pacific are not.",
          "type" : "string",
          "pattern" : "^([a-zA-Z_]+\\/){1,2}[-a-zA-Z_]+$"
        }
      },
      "required" : [ "id", "channelInfo", "members", "ownerUserId", "timezone" ]
    },
    "ChannelInfo" : {
      "description" : "PubNub channel information for a given group.",
      "type" : "object",
      "properties" : {
        "adminChannelId" : {
          "description" : "ID of \"admin\" channel. Only users with the admin app will be able to listen to this channel, though both the admin app and the managed app will be able to publish to this channel. Used with the admin PubNub key set.",
          "type" : "string"
        },
        "managedChannelId" : {
          "description" : "ID of \"managed\" channel. Only users with the managed (child) app will be able to listen to this channel, though both the admin app and the managed app will be able to publish to this channel. Used with the managed PubNub key set.",
          "type" : "string"
        }
      },
      "required" : [ "adminChannelId", "managedChannelId" ]
    },
    "GroupMember" : {
      "description" : "Object representing a group member and their role(s) in the group.",
      "type" : "object",
      "properties" : {
        "userId" : {
          "description" : "Unique identifier of the user who is a member of the group.",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        },
        "admin" : {
          "description" : "Is the user an admin of this group? (The group owner will always be an admin.)",
          "type" : "boolean"
        },
        "managed" : {
          "description" : "Is the user \"managed\" in this group, i.e. do controls features apply to this user?",
          "type" : "boolean"
        },
        "locationSharingPreference" : {
          "$ref" : "#/definitions/LocationSharingPreference"
        }
      },
      "required" : [ "userId" ]
    },
    "LocationSharingPreference" : {
      "description" : "Preference for location sharing. Users can share location with nobody, admins only or everyone in the family. Admin users can change this setting for managed users and themselves. Admins cannot change this setting for other admins. Default for admins is 'DO_NOT_SHARE' and for managed users is 'SHARE_WITH_ADMINS'.",
      "type" : "string",
      "enum" : [ "DO_NOT_SHARE", "SHARE_WITH_ADMINS", "SHARE_WITH_ALL" ]
    },
    "Place" : {
      "description" : "Information about a stored place.",
      "type" : "object",
      "properties" : {
        "addressString" : {
          "description" : "User-specified string that geocodes to this place's coordinates. Used when showing a summary of this location to an end user.",
          "type" : "string"
        },
        "id" : {
          "description" : "ID of place.",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        },
        "groupId" : {
          "description" : "ID of group associated with this place.",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        },
        "name" : {
          "description" : "Name of place, chosen by user.",
          "type" : "string"
        },
        "lat" : {
          "description" : "Latitude of place, in degrees.",
          "type" : "number",
          "format" : "double",
          "maximum" : 90.0,
          "minimum" : -90.0
        },
        "lon" : {
          "description" : "Longitude of place, in degrees.",
          "type" : "number",
          "format" : "double",
          "maximum" : 180.0,
          "minimum" : -180.0
        },
        "radiusMeters" : {
          "description" : "Radius, in meters, of the place.",
          "type" : "integer",
          "minimum" : 0
        },
        "notificationSettings" : {
          "description" : "Notification settings visible to the user.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PlaceNotificationSettings"
          }
        }
      },
      "required" : [ "id", "groupId", "name", "lat", "lon", "radiusMeters" ]
    },
    "PlaceNotificationSettings" : {
      "description" : "Settings for place notifications (Geofences) on the clients",
      "type" : "object",
      "properties" : {
        "userId" : {
          "description" : "ID of the user to be notified of.",
          "type" : "string"
        },
        "notifyOnEnter" : {
          "description" : "notify when user enters place.",
          "type" : "boolean",
          "default" : false
        },
        "notifyOnExit" : {
          "description" : "notify when user leaves place.",
          "type" : "boolean",
          "default" : false
        },
        "notificationType" : {
          "$ref" : "#/definitions/PlaceNotificationType"
        }
      },
      "required" : [ "userId" ]
    },
    "PlaceNotificationType" : {
      "description" : "Describes how to be notified for place notifications (geofences)",
      "type" : "object",
      "properties" : {
        "push" : {
          "description" : "Be notified via push notifications",
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "LastKnownInfo" : {
      "description" : "Collection of \"last known\" information for a specific user. This information is compiled by the server whenever the client publishes information. If an item is missing, then the server has never seen a relevant event for this user id.\n\n\"lastActivationMobileClientOs\" is the OS of the mobile client that was used for the last activation attempt from any device.\n\n\"lastKnownDeviceLocation\" is the last known location recieved from any device.\n\n\"lastKnownNetworkLocation\" will only be present in the response if the user has admin rights.",
      "type" : "object",
      "properties" : {
        "lastActivationMobileClientOs" : {
          "$ref" : "#/definitions/MobileClientOs"
        },
        "lastActivationTimestamp" : {
          "description" : "Last time that this user activated (i.e. set up) a client application on their mobile device.",
          "type" : "string",
          "format" : "date-time"
        },
        "lastInviteTimestamp" : {
          "description" : "Last time that an invite to download the client application was sent to this user.",
          "type" : "string",
          "format" : "date-time"
        },
        "lastKnownBatteryState" : {
          "$ref" : "#/definitions/BatteryState"
        },
        "lastKnownDeviceLocation" : {
          "$ref" : "#/definitions/Location"
        },
        "lastKnownEventTimestamp" : {
          "description" : "Last time that any event was received from an active mobile client for this user.",
          "type" : "string",
          "format" : "date-time"
        },
        "lastKnownLocationSettings" : {
          "$ref" : "#/definitions/LocationSettings"
        },
        "lastKnownNetworkLocation" : {
          "$ref" : "#/definitions/Location"
        },
        "lastKnownsByDevice" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LastKnownDeviceInfo"
          }
        },
        "lastKnownAppVersion" : {
          "description" : "The device's last known app version",
          "type" : "string"
        },
        "userId" : {
          "description" : "Unique user ID of the user that this information relates to.",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        }
      },
      "required" : [ "userId" ]
    },
    "MobileClientOs" : {
      "description" : "Specifies the operating system of a mobile client",
      "type" : "string",
      "enum" : [ "ANDROID", "IOS" ]
    },
    "BatteryState" : {
      "description" : "Describes battery state of a user.",
      "type" : "object",
      "properties" : {
        "batteryLevelPct" : {
          "description" : "percent of charge remaining",
          "type" : "integer"
        },
        "batteryStatus" : {
          "$ref" : "#/definitions/BatteryStatusEnum"
        }
      },
      "required" : [ "batteryLevelPct", "batteryStatus" ]
    },
    "BatteryStatusEnum" : {
      "description" : "Indicates the battery status.\n - CHARGING: device is plugged in and charging\n - PLUGGED: device is plugged in but not charging\n - UNKNOWN: cannot determine\n - UNPLUGGED: device is not plugged in and thus not charging",
      "type" : "string",
      "enum" : [ "CHARGING", "PLUGGED", "UNKNOWN", "UNPLUGGED" ]
    },
    "Location" : {
      "description" : "Structure describing a location fix obtained for a user.",
      "type" : "object",
      "properties" : {
        "accuracyMeters" : {
          "description" : "Radius of location halo, in meters. We need to make a final decision as to what confidence is assumed when calculating this number; working assumption is that this is 68%.",
          "type" : "number",
          "format" : "float",
          "minimum" : 0
        },
        "lat" : {
          "description" : "Latitude of location fix, in degrees.",
          "type" : "number",
          "format" : "double",
          "maximum" : 90.0,
          "minimum" : -90.0
        },
        "lon" : {
          "description" : "Longitude of location fix, in degrees.",
          "type" : "number",
          "format" : "double",
          "maximum" : 180.0,
          "minimum" : -180.0
        },
        "observedTimestamp" : {
          "description" : "Time when this location result was observed.",
          "type" : "string",
          "format" : "date-time"
        }
      },
      "required" : [ "accuracyMeters", "lat", "lon", "observedTimestamp" ]
    },
    "LocationSettings" : {
      "description" : "Describes location settings of a user.",
      "type" : "object",
      "properties" : {
        "isAppAuthorized" : {
          "description" : "True if the client application is authorized to use location services / GPS on the mobile device.",
          "type" : "boolean"
        },
        "isLocationServiceEnabled" : {
          "description" : "True if location services / GPS are globally enabled on the mobile device. May be omitted if this information is unavailable.",
          "type" : "boolean"
        },
        "lastChangedTimestamp" : {
          "description" : "Timestamp when these settings were last modified (or when they were first seen.)",
          "type" : "string",
          "format" : "date-time"
        }
      },
      "required" : [ "isAppAuthorized", "isLocationServiceEnabled", "lastChangedTimestamp" ]
    },
    "LastKnownDeviceInfo" : {
      "description" : "Collection of \"last known\" information for a specific device of a specific user. This information is compiled by the server whenever the client publishes information. If an item is missing, then the server has never seen a matching event for this user and this device.",
      "type" : "object",
      "properties" : {
        "deviceId" : {
          "description" : "Unique ID of the device to which this information relates.",
          "type" : "string",
          "maxLength" : 64
        },
        "lastActivationMobileClientOs" : {
          "$ref" : "#/definitions/MobileClientOs"
        },
        "lastActivationTimestamp" : {
          "description" : "Last time that this user activated (i.e. set up) a client application on this device.",
          "type" : "string",
          "format" : "date-time"
        },
        "lastKnownAppVersion" : {
          "description" : "The device's last known app version",
          "type" : "string"
        },
        "lastKnownBatteryState" : {
          "$ref" : "#/definitions/BatteryState"
        },
        "lastKnownDeviceLocation" : {
          "$ref" : "#/definitions/Location"
        },
        "lastKnownEventTimestamp" : {
          "description" : "Last time that any event was received from an active mobile client for this user and using this device ID.",
          "type" : "string",
          "format" : "date-time"
        },
        "lastKnownLocationSettings" : {
          "$ref" : "#/definitions/LocationSettings"
        }
      },
      "required" : [ "deviceId" ]
    },
    "User" : {
      "description" : "An object containing information about a user in the system.",
      "type" : "object",
      "properties" : {
        "cloudinaryImageId" : {
          "description" : "Image ID of an image of the user, in Cloudinary.",
          "type" : "string"
        },
        "id" : {
          "description" : "Unique ID for the user described here.",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        },
        "email" : {
          "description" : "Email address of this user.",
          "type" : "string",
          "minLength" : 5,
          "maxLength" : 256,
          "pattern" : "[^@]{1,64}@.{1,255}"
        },
        "mdn" : {
          "description" : "MDN for this user in E164 format. Must always be in E164 format, i.e. starting with \"+\" and a country code.",
          "type" : "string",
          "pattern" : "[+][1-9][0-9]{8,14}"
        },
        "name" : {
          "description" : "Name of this user.",
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 64
        },
        "yearOfBirth" : {
          "description" : "Year in which this user was born.",
          "type" : "integer",
          "minimum" : 1900,
          "maximum" : 3000
        }
      },
      "required" : [ "id" ]
    },
    "ControlsSettings" : {
      "description" : "Controls settings for a user.",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/ControlsSettingsFields"
      }, {
        "type" : "object",
        "properties" : {
          "groupId" : {
            "description" : "Unique ID for this group.",
            "type" : "string",
            "minLength" : 4,
            "maxLength" : 64
          },
          "userId" : {
            "description" : "Unique ID for this user.",
            "type" : "string",
            "minLength" : 4,
            "maxLength" : 64
          }
        },
        "required" : [ "groupId", "userId" ]
      } ]
    },
    "ControlsSettingsFields" : {
      "description" : "Fields in controls settings.",
      "type" : "object",
      "properties" : {
        "predefinedPolicyIds" : {
          "description" : "A list of the IDs of all predefined policies that should be applied to this user.",
          "type" : "array",
          "items" : {
            "description" : "ID of a policy",
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 64
          },
          "minItems" : 0
        },
        "customPolicies" : {
          "description" : "A list of all the custom policies that should be applied to this user.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CustomPolicy"
          },
          "minItems" : 0
        },
        "blockAllInternet" : {
          "description" : "A special flag to control whether internet should be blocked.",
          "type" : "boolean"
        }
      },
      "required" : [ "predefinedPolicyIds", "customPolicies", "blockAllInternet" ]
    },
    "CustomPolicy" : {
      "description" : "A custom policy that can be applied to a device. This policy should have exactly one field, representing the type of policy that is modeled.",
      "type" : "object",
      "properties" : {
        "blockDomain" : {
          "$ref" : "#/definitions/BlockDomainPolicy"
        },
        "whitelistDomain" : {
          "$ref" : "#/definitions/WhitelistDomainPolicy"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "BlockDomainPolicy" : {
      "description" : "A custom policy that blocks access to a single domain.",
      "type" : "object",
      "properties" : {
        "domain" : {
          "description" : "Domain name to affect.",
          "type" : "string",
          "pattern" : "([A-Za-z0-9][-A-Za-z0-9]{0,62}[.])+[A-Za-z0-9][-A-Za-z0-9]{0,62}",
          "maxLength" : 253
        }
      },
      "required" : [ "domain" ]
    },
    "WhitelistDomainPolicy" : {
      "description" : "A custom policy that whitelists access to a single domain.",
      "type" : "object",
      "properties" : {
        "domain" : {
          "description" : "Domain name to affect.",
          "type" : "string",
          "pattern" : "([A-Za-z0-9][-A-Za-z0-9]{0,62}[.])+[A-Za-z0-9][-A-Za-z0-9]{0,62}",
          "maxLength" : 253
        }
      },
      "required" : [ "domain" ]
    },
    "ManagedDevicesByUsers" : {
      "description" : "A List of ManagedDevicesByUser container.\nEach ManagedDevicesByUser contains user ID and lists of managed devices\nfor that user. If a user has no devices, no ManagedDevicesByUser record\nwill be present for that user.",
      "type" : "object",
      "properties" : {
        "items" : {
          "description" : "List of items of ManagedDevicesByUser of the users. Each ManagedDevicesByUser contains user ID and a list of ManagedDevices for that user.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ManagedDevicesByUser"
          }
        }
      },
      "required" : [ "items" ]
    },
    "ManagedDevicesByUser" : {
      "type" : "object",
      "properties" : {
        "userId" : {
          "type" : "string",
          "description" : "Unique ID of the user."
        },
        "managedDevices" : {
          "description" : "List of managed devices for that user.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ManagedDevice"
          },
          "minItems" : 1
        }
      },
      "required" : [ "userId", "managedDevices" ]
    },
    "ManagedDevice" : {
      "description" : "Details of a managed device.",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Unique ID of this managed device.",
          "type" : "string",
          "maxLength" : 64
        },
        "userId" : {
          "description" : "ID of user that owns this device",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        },
        "groupId" : {
          "description" : "ID of group associated with this device",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        },
        "platform" : {
          "$ref" : "#/definitions/Platform"
        },
        "status" : {
          "$ref" : "#/definitions/DeviceStatus"
        },
        "removeAppCode" : {
          "description" : "A numeric code that can be used to remove the application from an (Android) device. Will only be returned to admin users.",
          "type" : "string",
          "minLength" : 6,
          "maxLength" : 6
        },
        "isPrimary" : {
          "description" : "Flag indicating if a managed device is primary",
          "type" : "boolean"
        },
        "deviceState" : {
          "$ref" : "#/definitions/DeviceStateFlags"
        }
      },
      "required" : [ "id", "userId", "groupId", "status", "deviceState" ]
    },
    "Platform" : {
      "type" : "string",
      "enum" : [ "IOS", "ANDROID" ]
    },
    "DeviceStatus" : {
      "description" : "Status of device. Possible values are:\n  - NEW : new device, no invite has been sent yet.\n  - INVITED : invite has been sent to device but device has not yet completed setup.\n  - ENROLLED : device has completed setup and we've heard from it recently.\n  - PROFILE_REMOVED : iOS MDM profile has been removed.\n  - NO_ACTIVITY_ONE_DAY : device has completed setup but we haven't heard from it\n    for a while.\n  - DISABLED : part of Android setup (i.e. accessibility, device admin, or VPN)\n    has been modified.\n  - UNKNOWN : unable to fetch the status right now.",
      "type" : "string",
      "enum" : [ "NEW", "INVITED", "ENROLLED", "UNENROLLED", "PROFILE_REMOVED", "NO_ACTIVITY_ONE_DAY", "DISABLED", "UNKNOWN" ]
    },
    "DeviceStateFlags" : {
      "description" : "State of the device. A user device can be in one of a number of abnormal states, as described below.",
      "type" : "object",
      "properties" : {
        "isLocationStaleOrUnavailable" : {
          "description" : "True if the user should be messaged that location has become unavailable for\nthis device. Will be true if the below conditions are met:\n  1. Preconditions:\n    a) The user has a premium account.\n    b) This device is the primary device for this user\n    c) We have successfully gotten location from the child in the past.\n    d) This account has the \"location\" feature flag enabled\n    e) Location sharing is turned on for this user.\n  2. One of the below conditions:\n    a) Most recent GPS flag is off\n    b) Most recent location permissions are off\n    c) Most recent location from this (primary) device was over 24 hours ago",
          "type" : "boolean",
          "default" : false
        },
        "isContentFilteringStaleOrUnavailable" : {
          "description" : "True if the user should be messaged that content filtering features are\nunavailable for this devivce. Will be true if the following conditions are\nmet:\n  1. The user device has successfully completed Content filtering pairing.\n  2. One of the below conditions:\n    a) Android accessibility permission is off\n    b) Android device admin permission is off\n    c) iOS MDM profile was removed and we were notified about it\n    d) All of the below conditions:\n      * No DNS activity through Akamai for the device for 24 hours\n      * iOS, and child app hasn't responded to MDM push for 24 hours\n      * Android and child app hasn't checked in for 24 hours",
          "type" : "boolean",
          "default" : false
        },
        "isLocationNotSeen" : {
          "description" : "True if the user should be messaged that location has not yet been seen from\nthis device, and may not be available. \n\nWill be true if ALL OF:\n - This is the primary device, the account supports the location feature\n - the user has location sharing enabled\n - this device has never sent location for whatever reason",
          "type" : "boolean",
          "default" : false
        },
        "isProvisioningIncomplete" : {
          "description" : "True if the user should be messaged that initial provisioning has begun for\nthis device but has not yet been completed. \n\nNote that this state will not be entered during a \"re-pair\" flow.",
          "type" : "boolean",
          "default" : false
        },
        "clientUpgrade" : {
          "$ref" : "#/definitions/ClientUpgrade"
        }
      }
    },
    "ClientUpgrade" : {
      "description" : "This object will be present if the user should be messaged that the client app on the managed device is due to be updated in order to access new features. This object provides the text for that message - likely shown in a banner - and what should happen if the user takes action.",
      "type" : "object",
      "properties" : {
        "directLink" : {
          "description" : "This property governs the desired behavior if the parent user takes action on the upgrade message. If True, the upgrade should be managed by sending a direct app-store link to the child device (i.e. by calling POST /....). If False, the upgrade should be managed by sending a normal re-pair link (i.e. by calling POST /devices/{groupId}/{userId}/{deviceId}/pair)",
          "type" : "boolean",
          "default" : false
        },
        "message" : {
          "description" : "Message to display to the user regarding the client upgrade.",
          "type" : "string"
        }
      },
      "required" : [ "directLink", "message" ]
    },
    "UpdateMeRequest" : {
      "type" : "object",
      "properties" : {
        "clientSettings" : {
          "description" : "Per-user settings blob used by the client. This is intended to allow a client to store user-provided settings, so that they can be restored in the event of a client reinstall. Data in here is opaque to the server, but is shared between ALL clients for the user ID across all platforms.",
          "type" : "string"
        }
      }
    },
    "AuthRequest" : {
      "description" : "Credentials container for authentication. Must provide exactly one of property for authentication.",
      "type" : "object",
      "properties" : {
        "androidMdmAuthToken" : {
          "$ref" : "#/definitions/AndroidMdmAuthToken"
        },
        "usernamePasswordAuth" : {
          "$ref" : "#/definitions/UsernamePasswordAuth"
        },
        "isLocationSource" : {
          "description" : "True if this device should be used to provide location for parent users. Right now this should only be true for mobile phones.",
          "type" : "boolean"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 2
    },
    "AndroidMdmAuthToken" : {
      "description" : "Auth with android mdm device id and auth token",
      "type" : "object",
      "properties" : {
        "androidMdmDeviceId" : {
          "description" : "android mdm device id authenticate with",
          "type" : "string"
        },
        "androidMdmAuthToken" : {
          "description" : "android mdm token to authenticate with",
          "type" : "string"
        }
      },
      "required" : [ "androidMdmDeviceId", "androidMdmAuthToken" ]
    },
    "UsernamePasswordAuth" : {
      "description" : "Auth with username and password",
      "type" : "object",
      "properties" : {
        "username" : {
          "description" : "username to authenticate with",
          "type" : "string"
        },
        "password" : {
          "description" : "password to authenticate with",
          "type" : "string",
          "format" : "password"
        }
      },
      "required" : [ "username", "password" ]
    },
    "Token" : {
      "description" : "object containing an API access token and refresh token.",
      "type" : "object",
      "properties" : {
        "accessToken" : {
          "description" : "An access token for accessing the API.",
          "type" : "string",
          "format" : "password"
        },
        "refreshToken" : {
          "description" : "A refresh token that can be used to re-obtain an access token when the token given in the \"accessToken\" above expires.",
          "type" : "string",
          "format" : "password"
        }
      },
      "required" : [ "accessToken", "refreshToken" ]
    },
    "SignupToken" : {
      "description" : "A short lived provisional token used for signup. This only includes an accessToken that can be used for signing up. No refreshToken is provided and the client will need to re-authenticate to get a new signup token if needed.",
      "type" : "object",
      "properties" : {
        "accessToken" : {
          "description" : "An access token to be used for signup.",
          "type" : "string",
          "format" : "password"
        }
      },
      "required" : [ "accessToken" ]
    },
    "UpgradeConfig" : {
      "description" : "Upgrade configuration to return to the client. we have decided to send either forced or suggested action in accordance of the app version sent to the api, the message will be displayed accordingly.",
      "type" : "object",
      "properties" : {
        "upgradeAction" : {
          "$ref" : "#/definitions/UpgradeAction"
        },
        "upgradeMessage" : {
          "description" : "message to display to the client",
          "type" : "string"
        }
      },
      "required" : [ "upgradeAction" ]
    },
    "UpgradeAction" : {
      "description" : "- SUGGEST_UPGRADE - should be displayed when a new update to the app is available. - FORCE_UPGRADE - should be displayed Display when the current version of the child\n  app is deprecated.\n  app should not open until the upgrade has happened\n- NO_ACTION - when no upgrade needed",
      "type" : "string",
      "enum" : [ "SUGGEST_UPGRADE", "FORCE_UPGRADE", "NO_ACTION" ]
    },
    "UpdateGroupTimezoneRequest" : {
      "description" : "Request to update group timezone.",
      "type" : "object",
      "properties" : {
        "timezone" : {
          "description" : "Time zone of the owner of this account. This time zone will be used when determining how the user sees time, i.e. in any calculations that cause something to happen at a specific time of day, or to define day boundaries when looking at something that happened on a specific day.\n\nThe API supports standard timezone names in the continent/city or continent/country/city format. e.g. America/Los_Angeles and America/Argentina/Buenos_Aires are supported, but EST, Etc/GMT+1, and US/Pacific are not.",
          "type" : "string",
          "pattern" : "^([a-zA-Z_]+\\/){1,2}[-a-zA-Z_]+$"
        }
      },
      "required" : [ "timezone" ]
    },
    "UpdateLocationSharingPreferenceRequest" : {
      "description" : "Request to update user locationSharingPreference for the given group.",
      "type" : "object",
      "properties" : {
        "locationSharingPreference" : {
          "$ref" : "#/definitions/LocationSharingPreference"
        }
      }
    },
    "PlaceRequest" : {
      "description" : "Request to create or update a place.",
      "type" : "object",
      "properties" : {
        "addressString" : {
          "description" : "User-specified string that geocodes to this place's coordinates. Used when showing a summary of this location to an end user.",
          "type" : "string"
        },
        "name" : {
          "description" : "Name of the place",
          "type" : "string"
        },
        "lat" : {
          "description" : "Latitude of place, in degrees.",
          "type" : "number",
          "format" : "double",
          "maximum" : 90.0,
          "minimum" : -90.0
        },
        "lon" : {
          "description" : "Longitude of place, in degrees.",
          "type" : "number",
          "format" : "double",
          "maximum" : 180.0,
          "minimum" : -180.0
        },
        "radiusMeters" : {
          "description" : "Radius, in meters, of the place.",
          "type" : "integer",
          "minimum" : 0
        }
      },
      "required" : [ "name", "lat", "lon" ]
    },
    "HistoryItem" : {
      "description" : "Representation of an event in a user's history. Exactly one of the fields below should be non-empty. (For forwards-compatibility, clients should handle the case where none of the declared fields are present.)",
      "type" : "object",
      "properties" : {
        "deviceLocateRecord" : {
          "$ref" : "#/definitions/LocateRecord"
        },
        "failedNetworkLocateRecord" : {
          "$ref" : "#/definitions/FailedNetworkLocateRecord"
        },
        "geofenceRecord" : {
          "$ref" : "#/definitions/GeofenceRecord"
        },
        "networkLocateRecord" : {
          "$ref" : "#/definitions/LocateRecord"
        },
        "scheduleCheckResultRecord" : {
          "$ref" : "#/definitions/ScheduleCheckResultRecord"
        },
        "unknownLocationRecord" : {
          "$ref" : "#/definitions/UnknownLocationRecord"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "LocateRecord" : {
      "description" : "A history record for a location result.",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/HistoryRecord"
      }, {
        "properties" : {
          "historicalNearestPlace" : {
            "$ref" : "#/definitions/HistoricalNearestPlace"
          },
          "location" : {
            "$ref" : "#/definitions/Location"
          }
        },
        "required" : [ "location" ]
      } ]
    },
    "HistoryRecord" : {
      "description" : "Base definition for a record from user history. All history items share these fields.",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "unique id of this event",
          "type" : "string"
        },
        "groupId" : {
          "description" : "id of group under which this event occurred",
          "type" : "string"
        },
        "timestamp" : {
          "description" : "time when event was recorded",
          "type" : "string",
          "format" : "date-time"
        },
        "userId" : {
          "description" : "id of user whose location was requested",
          "type" : "string"
        },
        "deviceId" : {
          "description" : "id of the device located, if available",
          "type" : "string"
        }
      },
      "required" : [ "id", "groupId", "timestamp", "userId" ]
    },
    "HistoricalNearestPlace" : {
      "description" : "Details of the nearest place to the location result. \"historicalPlace\" here is the details of that place as they were at the time of the historical event.",
      "type" : "object",
      "properties" : {
        "distanceMeters" : {
          "description" : "distance in meters from center of place to center of location result",
          "type" : "integer",
          "minimum" : 0
        },
        "historicalPlace" : {
          "$ref" : "#/definitions/Place"
        }
      },
      "required" : [ "distanceMeters", "historicalPlace" ]
    },
    "FailedNetworkLocateRecord" : {
      "description" : "A history record for a failed network locate.",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/HistoryRecord"
      }, {
        "properties" : {
          "major" : {
            "type" : "string",
            "description" : "major error code associated with the failure."
          },
          "minor" : {
            "type" : "string",
            "description" : "minor error code associated with the failure."
          },
          "reason" : {
            "$ref" : "#/definitions/NetworkLocateFailureReason"
          }
        },
        "required" : [ "major", "minor", "reason" ]
      } ]
    },
    "NetworkLocateFailureReason" : {
      "description" : "Reason a network locate failed.",
      "type" : "object",
      "properties" : {
        "deviceUnreachable" : {
          "type" : "boolean",
          "description" : "Device was unreachable."
        },
        "tooInaccurate" : {
          "type" : "boolean",
          "description" : "Polling server rejected location because it was not accurate enough."
        },
        "other" : {
          "type" : "boolean",
          "description" : "Reason that does not fall into other defined reasons."
        }
      },
      "maxProperties" : 1
    },
    "GeofenceRecord" : {
      "description" : "Information about a geofence firing event. Note that the \"historicalPlace\" information here represents the place as it was at the time of the event firing; it may have changed since then.",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/HistoryRecord"
      }, {
        "properties" : {
          "direction" : {
            "$ref" : "#/definitions/GeofenceDirection"
          },
          "historicalPlace" : {
            "$ref" : "#/definitions/Place"
          },
          "location" : {
            "$ref" : "#/definitions/Location"
          }
        },
        "required" : [ "direction", "historicalPlace", "location" ]
      } ]
    },
    "GeofenceDirection" : {
      "description" : "This represents the type of motion that triggered a geofence firing event.",
      "type" : "string",
      "enum" : [ "ENTER", "EXIT" ]
    },
    "ScheduleCheckResultRecord" : {
      "description" : "This is a history record that represents a past schedule check result.\n\nThe field bestLocationResult contains the highest-accuracy location result that was\nobtained while handling this schedule check. If not present, the device could not be\nlocated.\n\nThe field historicalPlace contains information about the place associated with the\nschedule check, if any, at the time when the event was created.\n\nThe field historicalNearestPlace contains information about the place nearest to\nthe location result at the time when the event was created.\n",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/HistoryRecord"
      }, {
        "properties" : {
          "historicalNearestPlace" : {
            "$ref" : "#/definitions/HistoricalNearestPlace"
          },
          "historicalPlace" : {
            "$ref" : "#/definitions/Place"
          },
          "location" : {
            "$ref" : "#/definitions/Location"
          },
          "result" : {
            "$ref" : "#/definitions/ScheduleCheckResult"
          },
          "scheduleCheckId" : {
            "description" : "The ID of the schedule check that triggered this event.",
            "type" : "string"
          }
        },
        "required" : [ "result", "scheduleCheckId" ]
      } ]
    },
    "ScheduleCheckResult" : {
      "description" : "This represents the schedule check result.\n  - AT_PLACE: Schedule check was for a place and device was at that place\n  - FOUND: Schedule check was not for a place and device was located.\n  - NOT_AT_PLACE: Schedule check was for a place and device was not at that place.\n  - NOT_FOUND: device was not located\n",
      "type" : "string",
      "enum" : [ "AT_PLACE", "FOUND", "NOT_AT_PLACE", "NOT_FOUND" ]
    },
    "UnknownLocationRecord" : {
      "description" : "A history record for a time period where the user's location was not known",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/HistoryRecord"
      }, {
        "properties" : {
          "durationMinutes" : {
            "description" : "duration of the time period when the user's location was not known",
            "type" : "integer"
          }
        },
        "required" : [ "durationMinutes" ]
      } ]
    },
    "UpdateUserRequest" : {
      "description" : "Request object for PUT /users/{userId}, user update request. At least MDN or name must be provided IF the user is not not tied to a carrier plan. If the user is part of a carrier plan then neither are required.",
      "type" : "object",
      "properties" : {
        "cloudinaryImageId" : {
          "description" : "Image ID of an image of the user, in Cloudinary.",
          "type" : "string"
        },
        "email" : {
          "description" : "Email address of this user.",
          "type" : "string",
          "minLength" : 5,
          "maxLength" : 256,
          "pattern" : "[^@]{1,64}@.{1,255}"
        },
        "mdn" : {
          "description" : "MDN for this user in E164 format, i.e. starting with \"+\" and a country code. Can only be modified if not supplied by carrier; if supplied by carrier, this field will be ignored.",
          "type" : "string",
          "pattern" : "[+][1-9][0-9]{8,14}"
        },
        "name" : {
          "description" : "Name of this user.",
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 64
        },
        "yearOfBirth" : {
          "description" : "Year in which this user was born.",
          "type" : "integer",
          "minimum" : 1900,
          "maximum" : 3000
        }
      }
    },
    "UserImageUploadParams" : {
      "description" : "Parameters that can be used to upload an image to Cloudinary. All of these should be passed to the Cloudinary API without modification, otherwise the signature will not match.",
      "type" : "object",
      "properties" : {
        "publicId" : {
          "description" : "The Public ID of the image. This can be used to fetch the image after it has been uploaded, and should be recorded in the user profile once the upload is complete.",
          "type" : "string"
        },
        "epochTimestamp" : {
          "description" : "A timestamp in the format expected by Cloudinary (UTC seconds since Unix epoch), recorded at the time of this request.",
          "type" : "integer",
          "format" : "int64"
        },
        "apiKey" : {
          "description" : "A key that identifies this application to the Cloudinary API.",
          "type" : "string"
        },
        "context" : {
          "description" : "Context key-value pairs that will be attached to this image in the Cloudinary DB. These maybe used to support maintenance and cleanup. If present, must include at least one item; if no items are intended, omit \"context\".",
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          },
          "minProperties" : 1
        },
        "tags" : {
          "description" : "Tags that will be attached to this image in the Cloudinary DB. These may be used to support maintenance and cleanup. If present, must include at least one item; if no items are intended, omit \"tags\".",
          "type" : "array",
          "items" : {
            "description" : "a single tag that will be associated with the image",
            "type" : "string"
          },
          "minItems" : 1
        },
        "signature" : {
          "description" : "A signature of the above items, signed with the API secret. This is required for the upload to succeed.",
          "type" : "string",
          "format" : "password"
        }
      },
      "required" : [ "publicId", "epochTimestamp", "apiKey", "signature" ]
    },
    "VoipAccessResponse" : {
      "description" : "An object containing information about access of voip feature.",
      "type" : "object",
      "properties" : {
        "voipAccessToken" : {
          "description" : "Twilio-originated access token that a client can use to register with Twilio for VOIP functionality.",
          "type" : "string",
          "format" : "password"
        },
        "outboundCallFeatureToken" : {
          "description" : "LL-originated access token that the client must pass along when attempting an outbound call.",
          "type" : "string",
          "format" : "password"
        }
      },
      "required" : [ "voipAccessToken", "outboundCallFeatureToken" ]
    },
    "AddManagedDeviceRequest" : {
      "description" : "Request to add a managed device.",
      "type" : "object",
      "properties" : {
        "mdn" : {
          "description" : "MDN of the managed user to add. Required if the user does not have an MDN. (i.e. required in OTT.) Must always be in E164 format, i.e. starting with \"+\" and a country code.",
          "type" : "string",
          "pattern" : "[+][1-9][0-9]{8,14}"
        },
        "isPrimary" : {
          "description" : "Flag to indicate whether the device is primary",
          "type" : "boolean"
        }
      }
    },
    "AddManagedDeviceResponse" : {
      "description" : "Response from Add Managed User request. Indicates if further steps are required.",
      "type" : "object",
      "properties" : {
        "deviceId" : {
          "description" : "Unique ID of this managed device.",
          "type" : "string",
          "maxLength" : 64
        },
        "inviteLink" : {
          "description" : "Invite link for managed device.",
          "type" : "string"
        },
        "smsText" : {
          "description" : "Text of SMS that should be sent to user. If present, the client is responsible for sending this message in order to complete provisioning.",
          "type" : "string"
        }
      },
      "required" : [ "deviceId", "inviteLink" ]
    },
    "ControlsOnboardingInfo" : {
      "description" : "Information to enable the client to run the controls onboarding process for this user.",
      "type" : "object",
      "properties" : {
        "onboardingSteps" : {
          "description" : "List of steps to show in onboarding process. Steps should be shown in the same order they are returnex.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ControlsOnboardingStepInfo"
          },
          "minItems" : 1
        },
        "recommendedPolicyIds" : {
          "description" : "List of IDs for policies that are recommended for this user.",
          "type" : "array",
          "items" : {
            "description" : "Unique ID of a policy.",
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 64
          }
        }
      },
      "required" : [ "onboardingSteps", "recommendedPolicyIds" ]
    },
    "ControlsOnboardingStepInfo" : {
      "description" : "Information for a single page to be shown during the onboarding process. Each page corresponds to a controls category.",
      "type" : "object",
      "properties" : {
        "categoryId" : {
          "description" : "Unique ID of a content / controls category. If the user requests to customize the policies for this step, they should be shown the policy selection interface for this category.",
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 64
        },
        "onboardingStepTitle" : {
          "description" : "Title to be shown for this onboarding step. Usually the category name.",
          "type" : "string"
        },
        "onboardingStepDescription" : {
          "description" : "Description to be shown on the onboarding step. Describes what will be blocked if the user does not customize the policies.",
          "type" : "string"
        },
        "cloudinaryIconId" : {
          "description" : "Image ID that can be used to fetch the icon for this category from Cloudinary.",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        }
      },
      "required" : [ "categoryId", "onboardingStepTitle", "onboardingStepDescription", "cloudinaryIconId" ]
    },
    "PairManagedDeviceRequest" : {
      "description" : "Request data for a pair request",
      "type" : "object",
      "properties" : {
        "mdn" : {
          "description" : "MDN of the managed user to add. Required if the user does not have an MDN. (i.e. required in OTT.)",
          "type" : "string",
          "pattern" : "[+][1-9][0-9]{8,14}"
        },
        "directLink" : {
          "description" : "If true, send a platform-specific store download link for the child app instead of the usual Branch smart link.",
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "PairManagedDeviceResponse" : {
      "description" : "Response from a pair managed device request.",
      "type" : "object",
      "properties" : {
        "inviteLink" : {
          "description" : "Invite link for managed device.",
          "type" : "string"
        },
        "smsText" : {
          "description" : "Text of SMS that should be sent to user. If present, the client is responsible for sending this message in order to complete provisioning.",
          "type" : "string"
        }
      },
      "required" : [ "inviteLink" ]
    },
    "GetCategoriesResult" : {
      "description" : "Result from get categories call",
      "type" : "object",
      "properties" : {
        "lastModified" : {
          "description" : "Time when content categories were last modified. This value will change any time that the content categories change. It may also change when other items within the policy service (e.g. policies, age) have changed, resulting in false positives, but a client should treat this as if the content categories have changed, refetching with the \"GET /categories/\" and \"GET /policies/\" api calls. This is okay, as it is expected that this value changes on a relatively infrequent basis.",
          "type" : "string",
          "format" : "date-time"
        },
        "contentCategories" : {
          "description" : "A list of content category records.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PolicyCategory"
          },
          "minItems" : 0
        }
      },
      "required" : [ "lastModified", "contentCategories" ]
    },
    "PolicyCategory" : {
      "description" : "A record describing a content category.",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Unique ID of this content category",
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 64
        },
        "displayName" : {
          "description" : "Display name of this category",
          "type" : "string",
          "minLength" : 1
        },
        "shortDescription" : {
          "description" : "A short (one-line) description of this content category.",
          "type" : "string",
          "minLength" : 1
        },
        "cloudinaryIconId" : {
          "description" : "Image ID that can be used to fetch the icon for this category from Cloudinary.",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        }
      },
      "required" : [ "id", "displayName" ]
    },
    "GetPoliciesResult" : {
      "description" : "Result from get policies call",
      "type" : "object",
      "properties" : {
        "lastModified" : {
          "description" : "Time when predefined policies were last modified. This value will change any time that the predefined policies change. It may also change when other items within the policy service (e.g. categories, custom policies (those without categories), age), have changed, resulting in false positives, but a client should treat this as if the predefined policies have changed, refetching with the \"GET /categories/\" and \"GET /policies/\" api calls. This is okay, as it is expected that this value changes on a relatively infrequent basis.",
          "type" : "string",
          "format" : "date-time"
        },
        "policies" : {
          "description" : "A list of content policy records.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PolicyInfo"
          },
          "minItems" : 0
        }
      },
      "required" : [ "lastModified", "policies" ]
    },
    "PolicyInfo" : {
      "description" : "This object represents a (pre-defined) policy that can be applied to a managed device.",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Unique identifier for this predefined policy.",
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 64
        },
        "name" : {
          "description" : "User-printable name for this policy.",
          "type" : "string",
          "minLength" : 1
        },
        "summary" : {
          "description" : "Short (one-line) summary of this policy.",
          "type" : "string",
          "minLength" : 1
        },
        "longDescription" : {
          "description" : "Full description of this policy.",
          "type" : "string",
          "minLength" : 1
        },
        "categoryIds" : {
          "description" : "IDs of the category associated with this policy, if any. Policies not associated with a category are custom policies.",
          "type" : "array",
          "items" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 64
          },
          "minItems" : 1
        },
        "cloudinaryImageId" : {
          "description" : "ID that can be used to fetch the icon for this policy from Cloudinary.",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        },
        "isCategoryPolicy" : {
          "description" : "If true, then this policy is the \"special\" policy that, if set, will block all DNS activity in this category. This policy should probably be represented specially in the UI.",
          "type" : "boolean"
        }
      },
      "required" : [ "id", "name" ]
    },
    "DnsActivity" : {
      "description" : "DNS activity query response body.",
      "type" : "object",
      "properties" : {
        "activityRecords" : {
          "description" : "List of dns activity records, in descending timestamp order.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DnsActivityRecord"
          },
          "minItems" : 0
        },
        "domains" : {
          "description" : "List of internet domains for the activity.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Domain"
          },
          "minItems" : 0
        },
        "paginationToken" : {
          "description" : "Opaque value used for pagination. To retrieve the next page of results, the client may repeat the original request with this query parameter added. If this field is not present, there are no more results available for the given time interval.",
          "type" : "string"
        },
        "categoriesETag" : {
          "description" : "Current ETag value for the dns categories resource. The client can use this to determine if cached dns category information needs to be refreshed.",
          "type" : "string"
        }
      },
      "required" : [ "activityRecords", "domains", "categoriesETag" ]
    },
    "DnsActivityRecord" : {
      "description" : "An activity record for a given internet domain. Each record represents a DNS query made to a domain. Each record should have either a domainId (for categorized domains) or a domainName (for uncategorized domains).",
      "type" : "object",
      "properties" : {
        "domainId" : {
          "description" : "Domain id for this activity, for categorized domains.",
          "type" : "string"
        },
        "domainName" : {
          "description" : "Raw domain name for this activity. Used for uncategorized domains which do not have a domain id.",
          "type" : "string"
        },
        "timestamp" : {
          "description" : "Activity timestamp.",
          "type" : "string",
          "format" : "date-time"
        }
      },
      "required" : [ "timestamp" ]
    },
    "Domain" : {
      "description" : "Information about an internet domain.",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Unique id for this domain.",
          "type" : "string"
        },
        "displayName" : {
          "description" : "Display name for this domain. May be a domain name (e.g. \"abc.com\") or a human-readable name (e.g. \"Facebook\").",
          "type" : "string"
        },
        "categoryId" : {
          "description" : "Primary content category id for this domain.",
          "type" : "string"
        },
        "icon" : {
          "description" : "Cloudinary image ID of a custom icon for this domain. If not specified, clients should use the category icon.",
          "type" : "string"
        }
      },
      "required" : [ "id", "displayName", "categoryId" ]
    },
    "DnsCategories" : {
      "description" : "Content category data.",
      "type" : "object",
      "properties" : {
        "categories" : {
          "description" : "List of content categories.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContentCategory"
          }
        },
        "eTag" : {
          "description" : "Identifier of current version of content categories. This is the same value given in the ETag header, but is also provided in the body for client convenience.",
          "type" : "string"
        }
      },
      "required" : [ "categories", "eTag" ]
    },
    "ContentCategory" : {
      "description" : "Information about a content category.",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Unique id for this category.",
          "type" : "string"
        },
        "displayName" : {
          "description" : "Display name for this category.",
          "type" : "string"
        },
        "icon" : {
          "description" : "Cloudinary image ID of a custom icon for this category.",
          "type" : "string"
        }
      },
      "required" : [ "id", "displayName", "icon" ]
    },
    "DeviceActivationAuthRequest" : {
      "description" : "parameters for request to activate a device",
      "type" : "object",
      "properties" : {
        "deviceId" : {
          "description" : "id of the device being activated",
          "type" : "string",
          "maxLength" : 64
        },
        "userId" : {
          "description" : "id of the user being activated",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        },
        "activationSecret" : {
          "description" : "secret obtained from invite",
          "type" : "string",
          "format" : "password"
        },
        "mobileClientOs" : {
          "$ref" : "#/definitions/MobileClientOs"
        },
        "isLocationSource" : {
          "description" : "True if this device should be used to provide location for parent users. Right now this should only be true for mobile phones.",
          "type" : "boolean"
        }
      },
      "required" : [ "deviceId", "userId", "activationSecret", "mobileClientOs" ]
    },
    "ScheduleCheck" : {
      "description" : "Information about a schedule check.",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/ScheduleCheckRequest"
      }, {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique ID of this schedule check."
          },
          "groupId" : {
            "description" : "ID of the group of which ownerUser and user are members.",
            "type" : "string",
            "minLength" : 4,
            "maxLength" : 64
          },
          "timezone" : {
            "description" : "Time zone of the owner of this account. This time zone will be used when determining how the user sees time, i.e. in any calculations that cause something to happen at a specific time of day, or to define day boundaries when looking at something that happened on a specific day.\n\nThe API supports standard timezone names in the continent/city or continent/country/city format. e.g. America/Los_Angeles and America/Argentina/Buenos_Aires are supported, but EST, Etc/GMT+1, and US/Pacific are not.",
            "type" : "string",
            "pattern" : "^([a-zA-Z_]+\\/){1,2}[-a-zA-Z_]+$"
          }
        },
        "required" : [ "id", "groupId", "timezone" ]
      } ]
    },
    "ScheduleCheckRequest" : {
      "description" : "Request to create or update a schedule check.",
      "type" : "object",
      "allOf" : [ {
        "properties" : {
          "userId" : {
            "description" : "ID of the user to locate during schedule check.",
            "type" : "string",
            "minLength" : 4,
            "maxLength" : 64
          },
          "daysOfWeek" : {
            "type" : "array",
            "description" : "List of days of the week when the schedule check is configured to fire. This should be in the timezone specified in the schedule check. When setting a schedule check, the gateway will choose the timezone of the group, which is the timezone of the owner of the account. If the group's timezone changes, it is the responsibility for the gateway to update the timezone of all existing schedule checks owned by all admin users in that group.",
            "minItems" : 1,
            "maxItems" : 7,
            "items" : {
              "$ref" : "#/definitions/ScheduleCheckDaysOfWeek"
            }
          },
          "secondInDay" : {
            "type" : "integer",
            "description" : "The time of the day the schedule check should occur. This should be in seconds since midnight (0 <= time < 86400) in the timezone specified in the schedule check. When setting a schedule check, the gateway will choose the timezone of the group, which is the timezone of the owner of the account. If the group's timezone changes, it is the responsibility for the gateway to update the timezone of all existing schedule checks owned by all admin users in that group.",
            "minimum" : 0,
            "maximum" : 86400,
            "exclusiveMaximum" : true
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Indicates if the schedule check is enabled or disabled. Disabling is *not* merely disabling notifications. There is no need to check location if a schedule check is disabled. This allows us to support the suspended flag in the existing ScheduleCheck class in SFL finder core.",
            "default" : true
          }
        },
        "required" : [ "userId", "daysOfWeek", "secondInDay" ]
      } ]
    },
    "ScheduleCheckDaysOfWeek" : {
      "description" : "The possible values for Days of the week",
      "type" : "string",
      "enum" : [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ]
    },
    "FacebookAuthRequest" : {
      "description" : "Auth information obtained from Facebook Login. Exactly one of facebookCode or facebookAccessToken must be provided. Timezone should also be supplied, in case a new account needs to be created.",
      "type" : "object",
      "properties" : {
        "facebookCode" : {
          "description" : "A \"code\" obtained from Facebook Login.",
          "type" : "string",
          "format" : "password"
        },
        "facebookAccessToken" : {
          "description" : "An access token obtained from Facebook Login.",
          "type" : "string",
          "format" : "password"
        },
        "timezone" : {
          "description" : "Time zone of the owner of this account. This time zone will be used when determining how the user sees time, i.e. in any calculations that cause something to happen at a specific time of day, or to define day boundaries when looking at something that happened on a specific day.\n\nThe API supports standard timezone names in the continent/city or continent/country/city format. e.g. America/Los_Angeles and America/Argentina/Buenos_Aires are supported, but EST, Etc/GMT+1, and US/Pacific are not.",
          "type" : "string",
          "pattern" : "^([a-zA-Z_]+\\/){1,2}[-a-zA-Z_]+$"
        }
      },
      "required" : [ "timezone" ],
      "minProperties" : 2,
      "maxProperties" : 2
    },
    "OttAddManagedUserRequest" : {
      "description" : "Parameters for request to add a managed user",
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of this user.",
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 64
        },
        "mdn" : {
          "description" : "MDN for this user in E164 format, i.e. starting with \"+\" and a country code. In OTT we don't have any mechanism for tracking changes, that's up to the user - and we should be careful when using this value.",
          "type" : "string",
          "pattern" : "[+][1-9][0-9]{8,14}"
        },
        "yearOfBirth" : {
          "description" : "Year in which this user was born.",
          "type" : "integer",
          "minimum" : 1900,
          "maximum" : 3000
        }
      },
      "required" : [ "name" ]
    },
    "OttAddManagedUserResult" : {
      "description" : "Updated information after the user has beed added.",
      "type" : "object",
      "properties" : {
        "user" : {
          "$ref" : "#/definitions/User"
        },
        "group" : {
          "$ref" : "#/definitions/Group"
        }
      },
      "required" : [ "user", "group" ]
    },
    "VzwSignupInfo" : {
      "description" : "DTO that gives all necessary information about an account that is inquiring about signing up to our service.",
      "type" : "object",
      "properties" : {
        "eligibleForSignup" : {
          "description" : "Determines whether the account is eligible to signup for the service. This boolean is used to determine whether to proceed to the next step in the signup process.  There are many reason why an account can be ineligible for signup, an example: account already exists in our system.",
          "type" : "boolean"
        },
        "ownerMdn" : {
          "description" : "Owner mobile device number. Must always be in E164 format, i.e. starting with \"+\" and a country code.",
          "type" : "string",
          "pattern" : "[+][1-9][0-9]{8,14}"
        },
        "potentialAccountTypes" : {
          "description" : "A container of potential account types that we can have for the user. Possible options:\n  - BASIC: The user gets the controls functionality\n  - PREMIUM: The user get the controls and locator functionality",
          "$ref" : "#/definitions/VzwAccountType"
        },
        "potentialChildren" : {
          "description" : "A list of account lines which are eligible to be signed up. Those lines can be added as children",
          "type" : "array",
          "items" : {
            "description" : "The mdn of the potential child",
            "type" : "string",
            "pattern" : "[+][1-9][0-9]{8,14}"
          }
        }
      },
      "required" : [ "eligibleForSignup" ]
    },
    "VzwAccountType" : {
      "description" : "The subscription type for the account. Possible options are:\n  - BASIC: The user gets the controls functionality\n  - PREMIUM: The user get the controls and locator functionality",
      "type" : "object",
      "properties" : {
        "basic" : {
          "description" : "An indicator if the account is basic",
          "type" : "boolean"
        },
        "premium" : {
          "description" : "An indicator iif the account is premium.",
          "type" : "boolean"
        }
      }
    },
    "SignupForbiddenResponse" : {
      "description" : "403 - The sign up request could not be completed for some reason. Cause contains information on why this result was obtained.",
      "type" : "object",
      "properties" : {
        "cause" : {
          "$ref" : "#/definitions/SignupForbiddenCauses"
        }
      },
      "required" : [ "cause" ]
    },
    "SignupForbiddenCauses" : {
      "description" : "Cause for this forbidden response",
      "type" : "object",
      "properties" : {
        "notCarrierMdn" : {
          "description" : "the carrier family plan for this MDN is no longer active, or this MDN is not part of a valid carrier family plan.",
          "type" : "boolean"
        },
        "notAllowed" : {
          "description" : "this user is not allowed to perform the requested action, i.e. when trying to add a feature that you're not allowed to be.",
          "type" : "boolean"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "SignupRequest" : {
      "type" : "object",
      "properties" : {
        "ownerMdn" : {
          "description" : "Owner mobile device number. Must always be in E164 format, i.e. starting with \"+\" and a country code.",
          "type" : "string",
          "pattern" : "[+][1-9][0-9]{8,14}"
        },
        "accountType" : {
          "description" : "The subscription type for the account. Possible options are:\n  - BASIC: The user gets the controls functionality\n  - PREMIUM: The user get the controls and locator functionality",
          "$ref" : "#/definitions/VzwAccountType"
        },
        "childMdns" : {
          "description" : "The lines that we would like to provision as children under the account.",
          "type" : "array",
          "items" : {
            "type" : "string",
            "pattern" : "[+][1-9][0-9]{8,14}"
          },
          "minItems" : 0
        }
      },
      "required" : [ "ownerMdn", "accountType", "childMdns" ]
    },
    "VzwSignupStatus" : {
      "description" : "DTO containing the progress status for the attempt to signing up to our service",
      "type" : "object",
      "properties" : {
        "activationConflictDescription" : {
          "description" : "This field will be populated if failureReason is set to be:\n  CONFLICT_RESOLUTION_REQUIRED\nThis field essentially contains everything that the client needs to show to the end user so they can be informed of the account/billing changes that are required for them to complete signup for our service. If the user accepts/rejects the proposal, the client should make the \"resolveActivationConflicts\" API call to inform the backend about their decision.",
          "$ref" : "#/definitions/VzwActivationConflictDescription"
        },
        "completed" : {
          "description" : "This value is used to check whether the sign up process for the requesting account is complete or not.\n`completed` would be true  when the result of the getAsyncStatus() call is no longer changing. In the simplest case, where the client just polls getSignupStatus() until everything has stopped \"moving\", that simplifies the job of the client - the client can ignore the status of the rest of the structure until \"complete\" is true. That's a lot simpler than checking the status of individual items.\n\"Complete\" does not mean \"successful\". If a child add request fails, its status will become \"FAILED\", which does not prevent \"complete\" from becoming true.\nRemember, the \"complete\" flag really doesn't provide any information. A client can see the status of the child lines by looking for the \"PROCESSING\" status. So, \"complete\" is just for convenience - and this is the choice that provides the most utility.\nFew example scenarios are:\n  - some exception was faced while adding primary parent and the subsequent process\n    was not carried\n  - child, primary and secondary parents add process is complete\n  - primary and secondary parent were added successfully and activation of children\n    has been carried out but gave some errors",
          "type" : "boolean"
        },
        "failureReason" : {
          "description" : "This field will be only populated when a request has been completed and was not successful. Some of the current values that this will send are:\n  - CONFLICT_RESOLUTION_REQUIRED: This indicates to check out activation conflicts\n    in this DTO\n  - SERVICE_NOT_AVAILABLE_FOR_THIS_LINE: If the provisioning request failed with\n    the downstream system.\n  - SYSTEM_TEMPORARILY_UNAVAILABLE: Some downstream troubles have occurred while\n    processing, maybe try later?",
          "type" : "string"
        },
        "successful" : {
          "description" : "This value is set signaling whether the request was completed successfully.  This, in it's entirety will tell you whether or not the request has gone through the entire process properly and had no failures throughout it's life-cycle.\nClient can use `completed` and `successful` in conjunction to figure out whether they need to poll further or whether the request itself is successful.\nIf the request is `completed and not successful then the client can look at `failureReason` to figure out the next steps that is needed for them.",
          "type" : "boolean"
        },
        "permanentToken" : {
          "description" : "In case the status is successful, we will return token includes accessToken and refreshToken",
          "$ref" : "#/definitions/Token"
        }
      },
      "required" : [ "completed", "successful" ]
    },
    "VzwActivationConflictDescription" : {
      "description" : "This DTO represents the overall description of what all of the activation conflicts on the account.  This is used to send back overall, heading for what happened and a list of ActivationConflictSection which provide further detail of the conflict as well as the total price change (if any) for the account after resolving these conflicts.",
      "type" : "object",
      "properties" : {
        "introParagraphs" : {
          "description" : "A list of paragraphs that should be shown to the user when presenting conflicts. These paragraphs should be shown before the detailed conflict description (i.e. above).",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "sections" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VzwActivationConflictSection"
          }
        },
        "totalPrice" : {
          "description" : "The total price difference of the change being requested",
          "type" : "string"
        }
      },
      "required" : [ "introParagraphs" ]
    },
    "VzwActivationConflictSection" : {
      "description" : "This DTO is used to divide each account conflict into it's own section defined with whatever desired value. e.g. in the example:\n\n - Remove \"[Feature 1 Description]\" from:\n    - [5105550000]    [-$4.99]\n    - [5105550001]    [-$4.99]\n  - Add \"[Feature 2 Description]\" to:\n    - [5105550000]    [-$4.99]\n\nThe first three lines are one conflict section, and the next two lines are another conflict section.",
      "type" : "object",
      "properties" : {
        "heading" : {
          "description" : "Heading for this section. It provides detail about what we are attempting to do with this activation conflict.",
          "type" : "string"
        },
        "items" : {
          "description" : "List of items that this conflict has occurred for. In case of Verizon, this is simply a list of all of the MDNs that this feature conflict has occurred for and the price change for each mdn.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VzwActivationConflictItem"
          }
        }
      },
      "required" : [ "heading", "items" ]
    },
    "VzwActivationConflictItem" : {
      "description" : "This class is used to represent an item in the ActivationConflictSection DTO. It provides, further, information about what activation conflict and who is observing this conflict. e.g. in the example:\n\n - Remove \"[Feature 1 Description]\" from:\n    - [5105550000]    [-$4.99]\n    - [5105550001]    [-$4.99]\n  - Add \"[Feature 2 Description]\" to:\n    - [5105550000]    [-$4.99]\n\nThe second, third, and fifth lines are conflict items.",
      "type" : "object",
      "properties" : {
        "text" : {
          "description" : "A simple text that states where the conflict is occurring. For example:\n  text: 5105550000\nThis would mean that this MDN is where this change is observed.",
          "type" : "string"
        },
        "price" : {
          "description" : "The price associated with the change.",
          "type" : "string"
        }
      },
      "required" : [ "price", "text" ]
    },
    "SignupStatusForbiddenResponse" : {
      "description" : "403 - The sign up request could not be completed for some reason. Cause contains information on why this result was obtained.",
      "type" : "object",
      "properties" : {
        "cause" : {
          "$ref" : "#/definitions/SignupStatusForbiddenCauses"
        }
      },
      "required" : [ "cause" ]
    },
    "SignupStatusForbiddenCauses" : {
      "description" : "Cause for this forbidden response",
      "type" : "object",
      "properties" : {
        "notAllowed" : {
          "description" : "this user is not allowed to perform the requested action, i.e. when trying to add a feature that you're not allowed to be.",
          "type" : "boolean"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "SignupConflictResolutionRequest" : {
      "type" : "object",
      "properties" : {
        "resolutionAccepted" : {
          "description" : "Whether or not the user has accepted the resolution that was proposed to them.",
          "type" : "boolean"
        }
      },
      "required" : [ "resolutionAccepted" ]
    },
    "SignupConflictsForbiddenResponse" : {
      "description" : "403 - The sign up request could not be completed for some reason, which likely means something changed between last time you tried and now.",
      "type" : "object",
      "properties" : {
        "cause" : {
          "$ref" : "#/definitions/SignupConflictsForbiddenCauses"
        }
      },
      "required" : [ "cause" ]
    },
    "SignupConflictsForbiddenCauses" : {
      "description" : "Cause for this forbidden response",
      "type" : "object",
      "properties" : {
        "notAllowed" : {
          "description" : "this user is not allowed to perform the requested action, i.e. when trying to add a feature that you're not allowed to be.",
          "type" : "boolean"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "PhoneActivityEvents" : {
      "description" : "Collection of phone activity events.",
      "type" : "object",
      "properties" : {
        "events" : {
          "description" : "List of phone activity events, sorted in descending timestamp order.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PhoneActivityEventContainer"
          },
          "minItems" : 0
        }
      },
      "required" : [ "events" ]
    },
    "PhoneActivityEventContainer" : {
      "description" : "A container for a phone activity event. Exactly one of the properties should be present, depending on the activity type.",
      "type" : "object",
      "properties" : {
        "callEvent" : {
          "$ref" : "#/definitions/CallActivityEvent"
        },
        "mmsEvent" : {
          "$ref" : "#/definitions/MmsActivityEvent"
        },
        "smsEvent" : {
          "$ref" : "#/definitions/SmsActivityEvent"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "CallActivityEvent" : {
      "description" : "A phone call activity event.",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/PhoneActivityEvent"
      }, {
        "properties" : {
          "duration" : {
            "description" : "Call duration in seconds.",
            "type" : "integer",
            "minimum" : 0
          }
        },
        "required" : [ "duration" ]
      } ]
    },
    "PhoneActivityEvent" : {
      "description" : "Base model for a phone activity event, such as a phone call or text message.",
      "type" : "object",
      "properties" : {
        "timestamp" : {
          "description" : "Event time.",
          "type" : "string",
          "format" : "date-time"
        },
        "direction" : {
          "description" : "Direction of activity relative to the child.",
          "$ref" : "#/definitions/ActivityDirection"
        },
        "activityFlags" : {
          "description" : "Flags describing activity type and contact type.",
          "$ref" : "#/definitions/ActivityFlags"
        },
        "contactedMdn" : {
          "description" : "MDN of contacted party.",
          "type" : "string"
        },
        "contacts" : {
          "description" : "List of contacts at the time of the event.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ActivityContact"
          },
          "minItems" : 1
        },
        "contactFlags" : {
          "description" : "Flags describing contact type.",
          "$ref" : "#/definitions/ContactFlags"
        }
      },
      "required" : [ "timestamp", "direction", "activityFlags", "contactedMdn", "contacts", "contactFlags" ]
    },
    "ActivityDirection" : {
      "description" : "Direction of an activity event relative to the child. If none of the specified properties is true, clients should consider the direction unknown or not applicable and provide reasonable fallback behavior.",
      "type" : "object",
      "properties" : {
        "incoming" : {
          "description" : "Activity was incoming.",
          "type" : "boolean"
        },
        "outgoing" : {
          "description" : "Activity was outgoing.",
          "type" : "boolean"
        }
      },
      "maxProperties" : 1
    },
    "ActivityFlags" : {
      "description" : "Flags describing an activity event. Any combination of the flags may be present, or none at all.  Unspecified flags are assumed to be false.",
      "type" : "object",
      "properties" : {
        "schoolHours" : {
          "description" : "Activity occurred during the user's school hours window, as defined at the time of the event.",
          "type" : "boolean"
        },
        "nightHours" : {
          "description" : "Activity occurred during the user's night hours window, as defined at the time of the event.",
          "type" : "boolean"
        }
      }
    },
    "ActivityContact" : {
      "description" : "Contact information for a phone activity event.",
      "type" : "object",
      "properties" : {
        "contactId" : {
          "description" : "Contact id.",
          "type" : "string"
        },
        "displayName" : {
          "description" : "Contact display name.",
          "type" : "string"
        }
      },
      "required" : [ "contactId", "displayName" ]
    },
    "ContactFlags" : {
      "description" : "Flags representing contact state for an activity event. Any combination of flags may be set to true, including none at all.  Flags that are not specified should be assumed false.",
      "type" : "object",
      "properties" : {
        "emergencyNumber" : {
          "description" : "Contacted MDN was an emergency number.",
          "type" : "boolean"
        },
        "systemNumber" : {
          "description" : "Contacted MDN was a system number.",
          "type" : "boolean"
        },
        "watchlistContact" : {
          "description" : "Contact was watchlisted.",
          "type" : "boolean"
        },
        "firstTime" : {
          "description" : "First activity for this contact.",
          "type" : "boolean"
        }
      }
    },
    "MmsActivityEvent" : {
      "description" : "An MMS activity event.",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/PhoneActivityEvent"
      }, {
        "properties" : {
          "size" : {
            "description" : "Message size in bytes.",
            "type" : "integer",
            "minimum" : 0
          }
        },
        "required" : [ "size" ]
      } ]
    },
    "SmsActivityEvent" : {
      "description" : "An SMS activity event.",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/PhoneActivityEvent"
      }, {
        "properties" : { }
      } ]
    },
    "PhoneActivityAggregatesContainer" : {
      "description" : "Container for phone activity aggregates.",
      "type" : "object",
      "properties" : {
        "callAggregates" : {
          "description" : "Aggregates for call activity.",
          "$ref" : "#/definitions/CallActivityAggregates"
        },
        "smsMmsAggregates" : {
          "description" : "Aggregates for SMS/MMS activity.",
          "$ref" : "#/definitions/SmsMmsActivityAggregates"
        }
      }
    },
    "CallActivityAggregates" : {
      "description" : "Aggregate call activity data.",
      "type" : "object",
      "properties" : {
        "activityHistogram" : {
          "description" : "Histogram of call duration per hour, represented as a list of hourly buckets in ascending order.  The list may be \"sparse\", i.e. hours with no activity may be omitted from the list.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CallHistogramBucket"
          },
          "minItems" : 0,
          "maxItems" : 24
        },
        "schoolHours" : {
          "description" : "Total number of calls during school hours.",
          "type" : "integer",
          "minimum" : 0
        },
        "nightHours" : {
          "description" : "Total number of calls during night hours.",
          "type" : "integer",
          "minimum" : 0
        },
        "total" : {
          "description" : "Total number of calls during query range.",
          "type" : "integer",
          "minimum" : 0
        }
      },
      "required" : [ "activityHistogram", "schoolHours", "nightHours", "total" ]
    },
    "CallHistogramBucket" : {
      "description" : "A bucket in an hourly call histogram.",
      "type" : "object",
      "properties" : {
        "hourOfDay" : {
          "description" : "Hour of day in the user's time zone for this bucket.",
          "type" : "integer",
          "minimum" : 0,
          "maximum" : 23
        },
        "duration" : {
          "description" : "Call duration in minutes during the hour.",
          "type" : "integer",
          "minimum" : 0
        }
      },
      "required" : [ "hourOfDay", "duration" ]
    },
    "SmsMmsActivityAggregates" : {
      "description" : "Aggregate SMS/MMS activity data.",
      "type" : "object",
      "properties" : {
        "activityHistogram" : {
          "description" : "Histogram of SMS/MMS messages per hour, represented as a list of hourly buckets in ascending order.  The list may be \"sparse\", i.e. hours with no activity may be omitted from the list.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SmsMmsHistogramBucket"
          },
          "minItems" : 0,
          "maxItems" : 24
        },
        "schoolHours" : {
          "description" : "Total SMS/MMS messages during school hours.",
          "type" : "integer",
          "minimum" : 0
        },
        "nightHours" : {
          "description" : "Total SMS/MMS messages during night hours.",
          "type" : "integer",
          "minimum" : 0
        },
        "total" : {
          "description" : "Total number of messages during query range.",
          "type" : "integer",
          "minimum" : 0
        }
      },
      "required" : [ "activityHistogram", "schoolHours", "nightHours", "total" ]
    },
    "SmsMmsHistogramBucket" : {
      "description" : "A bucket in an hourly SMS/MMS histogram.",
      "type" : "object",
      "properties" : {
        "hourOfDay" : {
          "description" : "Hour of day in the user's time zone for this bucket.",
          "type" : "integer",
          "minimum" : 0,
          "maximum" : 23
        },
        "count" : {
          "description" : "SMS/MMS messages during the hour.",
          "type" : "integer",
          "minimum" : 0
        }
      },
      "required" : [ "hourOfDay", "count" ]
    },
    "VzwNotificationSettings" : {
      "description" : "Settings for the admin to receive notifications for certain user activities.",
      "type" : "object",
      "properties" : {
        "emergency" : {
          "description" : "Settings to get notifications for user's activity with 911.",
          "$ref" : "#/definitions/VzwNotificationDeliveryMethod"
        },
        "nightActivity" : {
          "description" : "Settings to get notifications for user's activity during night hours.",
          "$ref" : "#/definitions/VzwNotificationDeliveryMethod"
        },
        "schoolActivity" : {
          "description" : "Settings to get notifications for user's activity during school hours.",
          "$ref" : "#/definitions/VzwNotificationDeliveryMethod"
        },
        "unknownContact" : {
          "description" : "Settings to get notifications for user's activity with an unknown contact.",
          "$ref" : "#/definitions/VzwNotificationDeliveryMethod"
        },
        "watchlistContact" : {
          "description" : "Settings to get notifications for user's activity with Watchlist contact.",
          "$ref" : "#/definitions/VzwNotificationDeliveryMethod"
        },
        "weeklyReport" : {
          "description" : "True to get a weekly report email notification for user's activity.",
          "type" : "boolean"
        }
      },
      "minProperties" : 1
    },
    "VzwNotificationDeliveryMethod" : {
      "description" : "The methods used to deliver the notifications.",
      "type" : "object",
      "properties" : {
        "includeInDailyEmail" : {
          "description" : "Indicator to include a notification in daily email.",
          "type" : "boolean",
          "default" : false
        },
        "mobile" : {
          "description" : "Indicator to send a notification to mobile.",
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "VzwCallBlockPreferences" : {
      "type" : "object",
      "description" : "Representation of Verizon call block preferences.",
      "properties" : {
        "block411" : {
          "type" : "boolean",
          "description" : "True to block 411 calls."
        },
        "blockRestrictedCalls" : {
          "type" : "boolean",
          "description" : "True to block incoming calls from restricted phone numbers."
        }
      },
      "required" : [ "block411", "blockRestrictedCalls" ]
    },
    "VzwUsageControlsContact" : {
      "description" : "Representation of a trusted/blocked contact.",
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the contact",
          "type" : "string"
        },
        "phoneNumber" : {
          "description" : "Phone number of contact",
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/VzwUsageControlsContactState"
        }
      },
      "required" : [ "phoneNumber", "state" ]
    },
    "VzwUsageControlsContactState" : {
      "description" : "The state of a contact",
      "type" : "string",
      "enum" : [ "BLOCKED", "TRUSTED" ]
    },
    "VzwUsageControlsModifyContact" : {
      "type" : "object",
      "description" : "Object for modifying an existing Contact information. Currently the only supported operation is to change the type (from trusted to blocked or vice versa).",
      "properties" : {
        "name" : {
          "description" : "Optional name of contact.",
          "type" : "string"
        },
        "phoneNumber" : {
          "description" : "Phone number of contact.",
          "type" : "string"
        },
        "originalState" : {
          "$ref" : "#/definitions/VzwUsageControlsContactState"
        },
        "newState" : {
          "$ref" : "#/definitions/VzwUsageControlsContactState"
        }
      },
      "required" : [ "phoneNumber", "originalState", "newState" ]
    },
    "VzwUsageControlsContactIdentifier" : {
      "description" : "An identifier for a trusted / blocked contact.",
      "type" : "object",
      "properties" : {
        "phoneNumber" : {
          "description" : "Phone number of contact.",
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/VzwUsageControlsContactState"
        }
      },
      "required" : [ "phoneNumber", "state" ]
    },
    "VzwLimit" : {
      "description" : "Representation of a Verizon limit.",
      "type" : "object",
      "properties" : {
        "type" : {
          "$ref" : "#/definitions/VzwLimitType"
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Indicates whether the current limit is enabled or not."
        },
        "notifyOnly" : {
          "type" : "boolean",
          "description" : "Indicated whether we want to send a notification when the threshold has been reached instead of blocking the defined activity.  This is only applicable to DATA limits."
        },
        "threshold" : {
          "type" : "number",
          "format" : "double",
          "description" : "Numeric value for the given limit type.  Present if enabled is true."
        },
        "currentUsage" : {
          "type" : "number",
          "format" : "double",
          "description" : "Current total usage of the given type of limit, if enabled."
        }
      },
      "required" : [ "type", "enabled" ]
    },
    "VzwLimitType" : {
      "type" : "string",
      "description" : "The type of limit.",
      "enum" : [ "CALL", "DATA", "PURCHASE", "TEXT" ]
    },
    "VzwUpdateLimitRequest" : {
      "description" : "Request to update limit information.",
      "type" : "object",
      "properties" : {
        "type" : {
          "$ref" : "#/definitions/VzwLimitType"
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Indicates whether the current limit is enabled or not."
        },
        "notifyOnly" : {
          "type" : "boolean",
          "description" : "Indicated whether we want to send a notification when the threshold has been reached instead of blocking the defined activity.  This is only applicable to DATA limits."
        },
        "threshold" : {
          "type" : "number",
          "format" : "double",
          "description" : "Numeric value for the given limit type.  Required if enabled is true."
        }
      },
      "required" : [ "type", "enabled" ]
    },
    "VzwTimeRestriction" : {
      "description" : "Information about a time restriction, including its id",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/VzwTimeRestrictionFields"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "Unique ID of the time restriction.",
            "type" : "string"
          }
        },
        "required" : [ "id" ]
      } ]
    },
    "VzwTimeRestrictionFields" : {
      "description" : "Information about a time restriction",
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the time restriction",
          "type" : "string"
        },
        "days" : {
          "type" : "array",
          "description" : "Day(s) of the week to enforce the the time restriction.",
          "items" : {
            "$ref" : "#/definitions/DayOfWeek"
          },
          "minItems" : 1
        },
        "startTime" : {
          "$ref" : "#/definitions/TimeOfDay"
        },
        "endTime" : {
          "$ref" : "#/definitions/TimeOfDay"
        }
      },
      "required" : [ "name", "days", "startTime", "endTime" ]
    },
    "DayOfWeek" : {
      "type" : "string",
      "description" : "a day of the week",
      "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
    },
    "TimeOfDay" : {
      "type" : "object",
      "description" : "A time of day with resolution of minutes (no seconds).",
      "properties" : {
        "hours" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The hour of the day.",
          "minimum" : 0,
          "maximum" : 23
        },
        "minutes" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The minute of the given hour.",
          "minimum" : 0,
          "maximum" : 59
        }
      },
      "required" : [ "hours", "minutes" ]
    },
    "VzWActivityWindowResponse" : {
      "description" : "Wrapper object that will be returned to the client when asks for activity windows.",
      "type" : "object",
      "properties" : {
        "schoolHours" : {
          "$ref" : "#/definitions/VzwActivityWindow"
        },
        "nightHours" : {
          "$ref" : "#/definitions/VzwActivityWindow"
        }
      },
      "required" : [ "schoolHours", "nightHours" ]
    },
    "VzwActivityWindow" : {
      "description" : "Information about the activity window, including its id if end time is smaller than start time, then time restriction will continue until the specified time on the following day",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Unique ID of the time restriction.",
          "type" : "string"
        },
        "days" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DayOfWeek"
          },
          "uniqueItems" : true,
          "minItems" : 1
        },
        "startTime" : {
          "$ref" : "#/definitions/TimeOfDay"
        },
        "endTime" : {
          "$ref" : "#/definitions/TimeOfDay"
        }
      },
      "required" : [ "id", "days", "startTime", "endTime" ]
    },
    "VzwSubscription" : {
      "description" : "A collection of subscription info for family members corresponding to each line within a plan.",
      "type" : "object",
      "properties" : {
        "familyMemberSubscriptionInfos" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VzwFamilyMemberSubscriptionInfo"
          }
        }
      },
      "required" : [ "familyMemberSubscriptionInfos" ]
    },
    "VzwFamilyMemberSubscriptionInfo" : {
      "description" : "Information on a line and their eligibility within a plan. A family member may or may not be a user in the group. A family member can be distinguished by their MDN.",
      "type" : "object",
      "properties" : {
        "currentRole" : {
          "$ref" : "#/definitions/VzwFamilyMemberCurrentRole"
        },
        "mdn" : {
          "description" : "MDN for this family member in E164 format, i.e. starting with \"+\" and a country code.",
          "type" : "string",
          "pattern" : "[+][1-9][0-9]{8,14}"
        },
        "potentialRoles" : {
          "$ref" : "#/definitions/VzwFamilyMemberPotentialRoles"
        },
        "userId" : {
          "description" : "Unique identifier of the user corresponding to this family member. This will be present only if the family member is a user in the group.",
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 64
        }
      },
      "required" : [ "currentRole", "mdn", "potentialRoles" ]
    },
    "VzwFamilyMemberCurrentRole" : {
      "description" : "The role that this family member already has. An empty object indicates that the user corresponding to the family member may not be a part of the group.",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/VzwFamilyMemberRoles"
      } ],
      "maxProperties" : 1
    },
    "VzwFamilyMemberRoles" : {
      "description" : "The role that a family member has or can assume. A family member corresponds to a line on a plan. Each role represents a product code that the carrier can associate with a device to indicate that device's billing status within the account.",
      "type" : "object",
      "properties" : {
        "isPrimaryAdmin" : {
          "description" : "An indicator if the role is a primary admin, i.e. owner of this subscription.",
          "type" : "boolean"
        },
        "isSecondaryAdmin" : {
          "description" : "An indicator if the role is a secondary admin.",
          "type" : "boolean"
        },
        "isManagedUser" : {
          "description" : "An indicator if the role is a managed user.",
          "type" : "boolean"
        }
      }
    },
    "VzwFamilyMemberPotentialRoles" : {
      "description" : "All the possible roles that this family member can assume. This provides the available options for what can be used for a `currentRole`. A client can use this to derive a conclusion on the eligibility of the user corresponding to this family member to become an admin on the group.",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/VzwFamilyMemberRoles"
      } ],
      "minProperties" : 1
    },
    "VzwUpdateSubscriptionRequest" : {
      "description" : "Request to update a subscription's account type OR family member details.\nFor family member changes:\n  * To add a user corresponding to a family member to the group, the client\n    must add one of the available roles from the `potentialRoles` to\n    `currentRole` for that family member.\n  * To remove a user corresponding to a family member from the group, the\n    client must remove the role from `currentRole` for that family member,\n    i.e. provide an empty object.\n  * To make a non-admin user an admin or vice-versa, the client can replace\n    the `currentRole` with the desired entry from `potentialRoles`.\n\nFor account type change provide the desired account type in the accountType property.",
      "type" : "object",
      "properties" : {
        "accountType" : {
          "$ref" : "#/definitions/VzwAccountType"
        },
        "familyMemberSubscriptionInfos" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VzwFamilyMemberSubscriptionInfo"
          }
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "VzwUpdateSubscriptionResponse" : {
      "description" : "Response for updating subscription request.",
      "type" : "object",
      "properties" : {
        "requestId" : {
          "description" : "A unique identifier for the request.",
          "type" : "string"
        }
      }
    },
    "VzwUpdateSubscriptionStatusResponse" : {
      "description" : "Response for checking status of the update subscription request.",
      "type" : "object",
      "properties" : {
        "completed" : {
          "description" : "True if and only if the subscription update request is completed.",
          "type" : "boolean"
        },
        "successful" : {
          "description" : "True indicates that the subscription has successfully achieved the intended state. No decision should be made from this flag until the `completed` flag is true.",
          "type" : "boolean"
        }
      },
      "required" : [ "completed", "successful" ]
    },
    "VzwContact" : {
      "description" : "Contact details",
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/VzwContactEditableFields"
      }, {
        "properties" : {
          "id" : {
            "description" : "Unique identifier for a contact.",
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 64
          },
          "phoneNumbers" : {
            "description" : "A list of phone numbers associated with this contact.",
            "type" : "array",
            "items" : {
              "description" : "MDN on which to operate. This doesn't neccessarily start with \"+\" and a country code (e.g. 911)",
              "type" : "string"
            },
            "minItems" : 1
          },
          "rank" : {
            "description" : "The rank of the contact (how often this contact is communicated with relative to other contacts). System contacts are not ranked, i.e. the rank for system contacts will be missing.",
            "type" : "integer"
          },
          "systemContact" : {
            "description" : "Defines whether this is a system contact or not. A system contact is a contact managed by the system rather by a parent or a child. The contact name and phone number of a system contact varies from carrier to carrier. If a contact is a system contact, certain restrictions apply. System contacts cannot be added to a watch list.",
            "type" : "boolean"
          }
        },
        "required" : [ "id", "phoneNumbers", "systemContact" ]
      } ]
    },
    "VzwContactEditableFields" : {
      "description" : "Contact name and trusted state fields",
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "The contact name, set by the parent.",
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 64
        },
        "trustState" : {
          "$ref" : "#/definitions/VzwContactTrustState"
        }
      },
      "required" : [ "trustState" ]
    },
    "VzwContactTrustState" : {
      "description" : "The trust level of the contact.",
      "type" : "object",
      "properties" : {
        "isRegular" : {
          "description" : "Is the trustState of the contact 'regular'",
          "type" : "boolean"
        },
        "isWatchList" : {
          "description" : "Is the trustState of the contact 'watchList'",
          "type" : "boolean"
        }
      },
      "required" : [ "isRegular", "isWatchList" ]
    }
  }
}